{"version":3,"sources":["Todolist.module.css","reportWebVitals.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Store/todolists-reducer.ts","Store/tasks-reducer.ts","Todolist.tsx","AppWithRedux.tsx","Store/store.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","props","useState","title","setTitle","error","setError","addTaskOnClick","trim","addItem","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","onBlur","IconButton","onClick","style","width","color","AddBox","marginLeft","EditableSpan","editMode","setEditMode","setTile","onChangeTitle","autoFocus","onDoubleClick","todoListId_1","v1","todoListId_2","initialState","id","filter","changeTodolistTitleAC","todolistId","type","changeTodolistFilterAC","isDone","Todolist","tasks","useSelector","state","dispatch","useDispatch","tasksForTodoList","t","className","c","titleDiv","newValue","removeTodoList","Delete","addTaskAC","map","taskLine","Checkbox","checked","taskId","Button","margin","AppWithRedux","todoLists","todolist","changeTodoListTitle","todoListId","newTitle","action","todoListsComponents","td","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","container","addTodolistAC","spacing","rootReducer","combineReducers","tl","todolistToUpdate","find","stateCopy","filteredTasks","newTask","newTasks","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03f23d3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskInput\":\"Todolist_taskInput__ogLY3\",\"todolistContainer\":\"Todolist_todolistContainer__QkoOX\",\"title\":\"Todolist_title__12xE2\",\"titleDiv\":\"Todolist_titleDiv__11vVs\",\"addTaskButton\":\"Todolist_addTaskButton__lCCS0\",\"ListDeleteButton\":\"Todolist_ListDeleteButton__3rRVP\",\"taskLine\":\"Todolist_taskLine__2eH3N\",\"buttonRemoveTask\":\"Todolist_buttonRemoveTask__3WgM_\",\"error\":\"Todolist_error__2ag5_\",\"errorMessage\":\"Todolist_errorMessage__2cD4t\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\nimport { Button, IconButton, TextField } from '@material-ui/core';\nimport c from '../../Todolist.module.css';\nimport { AddBox } from '@material-ui/icons';\nimport { useDispatch } from 'react-redux';\nimport { addTaskAC } from '../../Store/tasks-reducer';\nimport { v1 } from 'uuid';\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void;\n}\n\nexport function AddItemForm(props: AddItemPropsType) {\n\n    let [title, setTitle] = useState<string>('');\n    let [error, setError] = useState<boolean>(false);\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n\n    const addTaskOnClick = () => {\n\n        if(title.trim() !== \"\" ) {\n          props.addItem(title.trim());\n          setTitle('');\n        } else {\n          setError(true);\n        }\n        \n      };\n    \n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\n    setError(false);\n    if (e.key === 'Enter') addTaskOnClick();\n    };\n\n    return(\n        <div>\n            {/* <input\n            className={`${c.taskInput} ${error ? c.error: \"\"}`}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            /> */}\n          <TextField\n            size={'small'}\n            variant={'outlined'}\n            error={error}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            label={\"Title\"}\n            helperText={error && 'Title is required!'}\n            onBlur={ () => setError(false)}\n          />\n        {/* <button className={c.addTaskButton} onClick={addTaskOnClick}>\n          +\n        </button> */}\n        <IconButton onClick={addTaskOnClick} style={{width: '5px'}} color={'primary'}>\n          <AddBox \n            style={{marginLeft: '25px'}}\n          />\n        </IconButton>\n\n            {/* {error && <div className={c.errorMessage}>Title is required!</div>} */}\n      </div>\n    )\n}","import React, { ChangeEvent, useState } from 'react';\n\n\n\ntype EditableSpanPropsType = {\n    title: string\n    onChangeTitle: (newValue: string) => void;\n  }\n  \nexport function EditableSpan(props: EditableSpanPropsType) {\n  \n    let [editMode, setEditMode] = useState(false)\n    let [title, setTile] = useState('')\n\n    let activateEditMode = () => {\n        setTile(props.title)\n        setEditMode(true)\n    }\n\n    let deactivateEditMode = () => {\n    \n        setEditMode(false)\n        props.onChangeTitle(title)\n    }\n    const onChangeTitleHandler = (e : ChangeEvent<HTMLInputElement>) => setTile(e.currentTarget.value);\n\n      return (    \n        editMode ?\n        <input value={title} onChange={onChangeTitleHandler} onBlur={deactivateEditMode} autoFocus></input> :\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\n      )\n  }","import { FilterValueType } from './../AppWithRedux';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport { TodoListType } from '../AppWithRedux';\n\nexport type RemoveTodolistActionType = {\n    type: \"REMOVE-TODOLIST\"\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: \"ADD-TODOLIST\"\n    title: string\n    todolistId: string\n}\ntype ChangeTodolistTitleActionType = {\n    type: \"CHANGE-TODOLIST-TITLE\"\n    id: string\n    title: string\n}\ntype ChangeTodolistFilterActionType = {\n    type: \"CHANGE-TODOLIST-FILTER\",\n    id: string\n    filter: FilterValueType\n}\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\n\n\nexport let todoListId_1 = v1();\nexport let todoListId_2 = v1();\n\nconst initialState: Array<TodoListType> = [\n    {id: todoListId_1, title: \"What to learn\", filter: 'all'},\n    {id: todoListId_2, title: \"What to buy\", filter: 'all'},\n]\n\nexport const todolistsReducer = (state: Array<TodoListType> = initialState, action: ActionsType):Array<TodoListType> => {\n\n    switch(action.type){\n\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id != action.id)\n        }\n\n        case 'ADD-TODOLIST': {\n            return [{\n                id: action.todolistId,\n                title: action.title,\n                filter: 'all'\n            }, ...state]\n        }\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.title = action.title;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-TODOLIST-FILTER': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.filter = action.filter;\n            }\n            return [...state]\n        }\n            \n        default: \n            return state;\n\n    }\n    \n}\n\n// Action Creators\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n    return {type: \"REMOVE-TODOLIST\", id: todolistId}\n}\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: \"ADD-TODOLIST\", title: title, todolistId: v1()}\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: todolistId, title: title}\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValueType): ChangeTodolistFilterActionType => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter}\n}\n\n\n\n// For Practice\n//\n//\n// type StateType = {\n//     age: number\n//     childrenCount: number\n//     name: string\n// }\n// type ActionType = {\n//     type: string\n//     [key: string]: any\n// }\n\n// export const userReducer = (state: StateType, action: ActionType): StateType => {\n\n//     switch(action.type) {\n\n//         case \"INCREMENT-AGE\":\n//             let newState = {...state}\n//             newState.age = state.age + 1;\n//             return newState\n\n//         case \"INCREMENT-CHILDREN-COUNT\":\n            \n//         // another way to copy and return state\n//             return {\n//                 ...state,\n//                 childrenCount: state.childrenCount + 1\n//             }\n\n//         case \"CHANGE-NAME\":\n//             return {\n//                 ...state,\n//                 name: action.newName \n//             }\n            \n//         default:\n//             throw new Error(\"I don't know what to do\")\n//     }\n\n// }\n","import { FilterValueType, TasksStateType } from '../AppWithRedux';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport { TodoListType } from '../AppWithRedux';\nimport { AccessTimeOutlined } from '@material-ui/icons';\nimport { AddTodolistActionType, RemoveTodolistActionType, todoListId_1, todoListId_2 } from './todolists-reducer';\n\ntype RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    todolistId: string\n    taskId: string\n}\ntype AddTaskActionType = {\n    type: 'ADD-TASK'\n    title: string\n    todolistId: string\n}\ntype ChangeTaskStatusActionType = {\n    type: 'CHANGE-TASK-STATUS'\n    isDone: boolean\n    todolistId: string\n    taskId: string\n} \ntype ChangeTaskTitleActionType = {\n    type: 'CHANGE-TASK-TITLE'\n    title: string\n    todolistId: string\n    taskId: string\n} \n\ntype ActionsType = RemoveTaskActionType | \n                   AddTaskActionType | \n                   ChangeTaskStatusActionType | \n                   ChangeTaskTitleActionType | \n                   AddTodolistActionType | \n                   RemoveTodolistActionType\n\n\nconst initialState: TasksStateType = {\n    [todoListId_1] : [{ id: v1(), title: 'CSS', isDone: true },\n      { id: v1(), title: 'JS', isDone: true },\n      { id: v1(), title: 'React', isDone: false },\n      { id: v1(), title: 'HTML', isDone: false },],\n    [todoListId_2] : [{ id: v1(), title: 'CSS', isDone: true },\n      { id: v1(), title: 'Book', isDone: true },\n      { id: v1(), title: 'Beer', isDone: false },\n      { id: v1(), title: 'Milk', isDone: false },],\n  }                \n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n\n    switch(action.type){\n\n        case 'REMOVE-TASK' : {\n            \n            const stateCopy = {...state}\n            const tasks = state[action.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = filteredTasks\n \n            return stateCopy;\n        }\n        case 'ADD-TASK' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            const newTask = {id: v1(), title: action.title, isDone: false}\n            const newTasks = [newTask, ...tasks];\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            \n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\n            \n            return stateCopy;\n        }\n        case 'CHANGE-TASK-TITLE' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n\n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, title: action.title} : t)\n            return stateCopy;\n        }\n        case 'ADD-TODOLIST' : {\n            const stateCopy = {...state}\n\n            stateCopy[action.todolistId] = []\n\n            return stateCopy\n        } \n        case \"REMOVE-TODOLIST\" : {\n            const stateCopy = {...state}\n            delete stateCopy[action.id]  // delete property\n            return stateCopy\n        } \n        \n        default: \n            return state;\n\n    }\n    \n}\n\n// Action Creators\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return {type: \"REMOVE-TASK\", todolistId, taskId}\n}\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\n    return {type: \"ADD-TASK\", title, todolistId}\n}\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\n    return {type: \"CHANGE-TASK-STATUS\", taskId, isDone, todolistId}\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\n    return {type: \"CHANGE-TASK-TITLE\", taskId, title, todolistId}\n}\n\n","import React, { useState, KeyboardEvent } from 'react';\nimport { preProcessFile } from 'typescript';\nimport { v1 } from 'uuid';\nimport { FilterValueType,  TasksStateType} from './AppWithRedux';\nimport { AddItemForm } from './Components/AddItemForm/AddItemForm';\nimport c from './Todolist.module.css';\nimport {EditableSpan} from './Components/EditableSpan/EditableSpan';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './Store/tasks-reducer';\nimport { changeTodolistFilterAC, changeTodolistTitleAC } from './Store/todolists-reducer';\n\nexport type TaskType = {\n  id: string;\n  title: string;\n  isDone: boolean;\n};\n\ntype PropsTypeTodolist = {\n  todolistId: string; \n  title: string;\n  filter: FilterValueType;\n  //tasks: TasksStateType;\n  //addTask: (title: string, id: string) => void;\n  //addToDoList: (title: string, id?: string) => void;\n  //removeTask: (id: string, todoListId: string) => void;\n  //changeFilter: (todoListId: string, filter: FilterValueType) => void;\n  //changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void;\n  //changeTitle: (taskId: string, newTitle: string, todoListId: string) => void;\n  changeTodoListTitle: (newTitle: string, todoListId: string) => void;\n  removeTodoList: (id: string) => void;\n  // onChangeTitle: (newValue: string) => void;\n};\n\nexport function Todolist(props: PropsTypeTodolist) {\n\n  const tasks = useSelector<AppRootState, Array<TaskType>>( state => state.tasks[props.todolistId])\n  const dispatch = useDispatch();\n\n  // Filter functions\n  const showAll = () => {\n    //props.changeFilter(props.id, 'all');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'all'))\n  };\n  const showActive = () => {\n    //props.changeFilter(props.id, 'active');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'active'))\n  };\n  const showCompleted = () => {\n    //props.changeFilter(props.id, 'completed');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'completed'))\n  };\n\n  const removeTodoList = () => {\n    props.removeTodoList(props.todolistId);\n  }\n\n  const changeTodoListTileHandler = (newValue: string) => {\n    //props.changeTodoListTitle(props.id, newValue)\n    dispatch(changeTodolistTitleAC(props.todolistId, newValue))\n  }\n\n  \n\n\n    // We gonna show task only depends what filter selected\n    let tasksForTodoList = tasks;\n    if (props.filter === 'completed') {\n      tasksForTodoList = tasksForTodoList.filter((t) => t.isDone === true);\n    }\n    if (props.filter === 'active') {\n      tasksForTodoList = tasksForTodoList.filter((t) => t.isDone === false);\n    }\n\n\n  return (\n    //<div className={c.todolistContainerw}>\n      <div>\n      {/* Remove todoList start*/}\n      {/* <button onClick={removeTodoList} className={c.ListDeleteButton}>X</button> */}\n      \n      \n      {/* Remove todoList end*/}\n\n      <div className={c.titleDiv}>\n        <EditableSpan title={props.title} onChangeTitle={changeTodoListTileHandler}/>\n        <IconButton onClick={removeTodoList}>\n                  <Delete/>\n      </IconButton>\n        {/* <h3 className={c.title}>{props.title}</h3> */}\n      </div>\n      \n\n      <AddItemForm addItem={ (title) => {dispatch(addTaskAC(title, props.todolistId))}}/> \n      {/* addItem={props.addTask} todoListId={props.id}/> */}\n\n      <ul>\n        {tasksForTodoList.map( (t) => {\n          \n          const onChangeTaskTitleHandler = (newValue: string) => {\n              dispatch(changeTaskTitleAC(t.id, newValue, props.todolistId))\n          }\n          return <li key={t.id} className={t.isDone ? \"isDone\" : \"\"}>\n            <div className={c.taskLine}>\n              <div>\n\n                <Checkbox \n                    color={'primary'}\n                    checked={t.isDone} \n                    // onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}}\n                    onChange={ () => {dispatch(changeTaskStatusAC(t.id, !t.isDone, props.todolistId))}}\n                    />\n                {/* <input onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}} type=\"checkbox\" checked={t.isDone} /> */}\n                \n                {/* <span>{t.title}</span> */}\n                <EditableSpan title={t.title} onChangeTitle={onChangeTaskTitleHandler}/>\n              \n              {/* Remove task Button */}\n\n              </div>\n              {/* <div className={c.buttonRemoveTask}> */}\n              <div>\n                {/* <button\n                  onClick={() => {\n                    props.removeTask(t.id, props.id);\n                  }}\n                >\n                  X\n                </button> */}\n                <IconButton onClick={() => {\n                    // props.removeTask(t.id, props.id);\n                    dispatch(removeTaskAC(t.id, props.todolistId))\n                  }}>\n                  <Delete/>\n                </IconButton>\n              </div>\n            </div>\n          </li>\n          })}\n      </ul>\n\n      <div>\n        {/* Without material-ui using CSS only */}\n        {/* <button className={props.filter === \"all\" ? \"activeFilter\" : \"\"} onClick={showAll}>All</button>\n        <button className={props.filter === \"active\" ? \"activeFilter\" : \"\"} onClick={showActive}>Active</button>\n        <button className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} onClick={showCompleted}>Completed</button> */}\n\n        {/* Using material-ui */}\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            variant={props.filter === \"all\" ? \"contained\" : 'outlined'}\n            color={'primary'}\n            //className={props.filter === \"all\" ? \"activeFilter\" : \"\"} \n            onClick={showAll}>All</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            color={'primary'}\n            variant={props.filter === \"active\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"active\" ? \"activeFilter\" : \"\"} \n            onClick={showActive}>Active</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px', width: '100px'}}\n            color={'primary'}\n            variant={props.filter === \"completed\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} \n            onClick={showCompleted}>Completed</Button>\n      </div>\n    </div>\n  );\n}\n\n\n","import React, { useState, useReducer } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TaskType, Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { AddItemForm } from './Components/AddItemForm/AddItemForm';\nimport { EditableSpan } from './Components/EditableSpan/EditableSpan';\nimport { AppBar, Button, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\nimport { Menu } from '@material-ui/icons';\nimport { addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC, todolistsReducer } from './Store/todolists-reducer';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer } from './Store/tasks-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\n\nexport type FilterValueType = 'all' | 'completed' | 'active';\n\nexport type TodoListType = {\n  id: string;\n  title: string;\n  filter: FilterValueType;\n}\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n  \n\n  const dispatch = useDispatch();\n  const todoLists = useSelector<AppRootState, Array<TodoListType>>( state => state.todolist)\n  //const tasks = useSelector<AppRootState, TasksStateType>( state => state.tasks)\n\n\n  // function changeStatus(taskId: string, isDone: boolean, todoListId: string) {\n    \n  //   const action = changeTaskStatusAC(taskId, isDone, todoListId)\n  //   dispatch(action)\n  // }\n\n  // function changeTitle(taskId: string, newTitle: string, todoListId: string) {\n  //   //const action = changeTaskTitleAC(taskId, newTitle, todoListId)\n  //   dispatch(changeTaskTitleAC(taskId, newTitle, todoListId))\n  // }\n\n  function changeTodoListTitle(todoListId: string, newTitle: string) {\n    dispatch(changeTodolistTitleAC(todoListId, newTitle))\n  }\n\n  // function changeFilter(todoListId: string, filter: FilterValueType) {\n  //   dispatch(changeTodolistFilterAC(todoListId, filter))\n  // }\n\n  // function removeTask(id: string, todoListId: string) {\n    \n  //   const action = removeTaskAC(id, todoListId)\n  //   dispatch(action)\n  // }\n\n  let removeTodoList = (todoListId: string) => {\n    \n    const action = removeTodolistAC(todoListId)\n    dispatch(action)\n  }\n\n  // function addTask(title: string, todolistId: string) {\n    \n  //   const action = addTaskAC(title, todolistId)\n  //   dispatch(action)\n  // }\n\n  // function addToDoList(title: string) {\n\n  //     const action = addTodolistAC(title)\n  //     dispatch(action)\n      \n  //}\n\n\n  const todoListsComponents = todoLists.map( (td) => {\n\n\n    return (\n          <Grid item key={td.id}>\n              <Paper elevation={5} style={{padding: '20px'}}>\n                <Todolist\n                  \n                  todolistId={td.id}\n                  title={td.title}\n                  filter={td.filter}            \n                  //tasks={tasks}\n                  //removeTask={removeTask}\n                  //addTask={addTask}\n                  //changeFilter={changeFilter}\n                  //changeStatus={changeStatus}\n                  removeTodoList={removeTodoList}\n                  //changeTitle={changeTitle}\n                  changeTodoListTitle={changeTodoListTitle}\n                />\n          </Paper>\n          </Grid>\n    )\n  })\n\n   return ( \n   <div className=\"App\">\n     \n       <AppBar position={'static'}>\n               <Toolbar style={{justifyContent: 'space-between'}}>\n                   <IconButton color={'inherit'}>\n                       <Menu />\n                   </IconButton>\n                   <Typography variant={'h6'}>\n                     TodoLists\n                   </Typography> \n                   <Button variant={'outlined'} \n                             color={'inherit'}>\n                     Login\n                   </Button> \n               </Toolbar>\n       </AppBar> \n\n       {/* <div className=\"Title\"> */}\n         {/* <h3>Add NEW ToDoList</h3> */}\n\n         {/* <EditableSpan title={\"Add NEW ToDoList\"}/>  */}\n\n           <Grid container style={{padding: '20px'}}>\n              \n              <AddItemForm addItem={ (title) => {dispatch(addTodolistAC(title))}} />\n           </Grid>\n           <Grid container spacing={3} style={{padding: '20px'}}>\n              {todoListsComponents}\n           </Grid>\n\n           \n       {/* </div> */}\n       {/* <div className=\"ToDoLists\"> */}\n  </ div> )\n           {/* {todoLists.map( (td) => {\n\n//             let tasksForTodoList = tasksObj[td.id];\n//             if (td.filter === 'completed') {\n//               tasksForTodoList = tasksForTodoList.filter((t) => t.isDone === true);\n//             }\n//             if (td.filter === 'active') {\n//               tasksForTodoList = tasksForTodoList.filter((t) => t.isDone === false);\n//             } */}\n          \n//                   return ( <div> \n                     \n//                   <Grid container>\n//                     <Todolist\n//                         key={td.id}\n//                         id={td.id}\n//                         title={td.title}\n//                         filter={td.filter}            \n//                         tasks={tasksForTodoList}\n//                         removeTask={removeTask}\n//                         addTask={addTask}\n//                         changeFilter={changeFilter}\n//                         changeStatus={changeStatus}\n//                         removeTodoList={removeTodoList}\n//                         changeTitle={changeTitle}\n//                         changeTodoListTitle={changeTodoListTitle}\n//                       />    \n//                   </Grid>    \n//                 </div>)\n//             } ) \n//           }\n//       </div>\n\n\n//     </div>\n//   )\n}\nexport default AppWithRedux;\n","import { combineReducers, createStore } from \"redux\";\nimport { tasksReducer } from \"./tasks-reducer\";\nimport { todolistsReducer } from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers({\n    todolist: todolistsReducer,\n    tasks: tasksReducer\n});\n\n// type AppRootState = {\n//     todolist: Array<TodoListType>\n//     tasks: TasksStateType\n// }\n\n// Same as what above, but more practical\nexport type AppRootState = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer);\n\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport AppWithRedux from './AppWithRedux';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <AppWithReducers /> */}\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>\n    \n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}