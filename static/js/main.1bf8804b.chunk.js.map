{"version":3,"sources":["Components/AddItemForm/AddItemForm.module.css","Todolist.module.css","Components/Task/Task.module.css","reportWebVitals.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Store/tasks-reducer.ts","Store/todolists-reducer.ts","Components/Task/Task.tsx","Todolist.tsx","AppWithRedux.tsx","Store/store.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTaskOnClick","trim","addItem","className","style","itemForm","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","onBlur","IconButton","onClick","width","color","AddBox","marginLeft","EditableSpan","editMode","setEditMode","setTile","onChangeTitle","autoFocus","onDoubleClick","initialState","addTaskAC","todolistId","type","changeTodolistTitleAC","id","changeTodolistFilterAC","filter","Task","dispatch","useDispatch","onChangeTaskTitleHandler","useCallback","newValue","taskId","task","isDone","taskLine","Checkbox","checked","Delete","Todolist","tasks","useSelector","state","showAll","showActive","showCompleted","removeTodoList","changeTodoListTileHandler","addTask","tasksForTodoList","t","c","titleDiv","map","Button","margin","AppWithRedux","todoLists","todolist","changeTodoListTitle","todoListId","newTitle","action","addToDolist","v1","addTodolistAC","todoListsComponents","td","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","container","spacing","rootReducer","combineReducers","tl","todolistToUpdate","find","stateCopy","filteredTasks","newTask","newTasks","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bf8804b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemForm\":\"AddItemForm_itemForm__iA_oL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskInput\":\"Todolist_taskInput__ogLY3\",\"todolistContainer\":\"Todolist_todolistContainer__QkoOX\",\"title\":\"Todolist_title__12xE2\",\"titleDiv\":\"Todolist_titleDiv__11vVs\",\"addTaskButton\":\"Todolist_addTaskButton__lCCS0\",\"ListDeleteButton\":\"Todolist_ListDeleteButton__3rRVP\",\"buttonRemoveTask\":\"Todolist_buttonRemoveTask__3WgM_\",\"error\":\"Todolist_error__2ag5_\",\"errorMessage\":\"Todolist_errorMessage__2cD4t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskLine\":\"Task_taskLine__MG8R8\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\nimport { Button, IconButton, TextField } from '@material-ui/core';\nimport c from '../../Todolist.module.css';\nimport { AddBox } from '@material-ui/icons';\nimport { useDispatch } from 'react-redux';\nimport { addTaskAC } from '../../Store/tasks-reducer';\nimport { v1 } from 'uuid';\nimport style from './AddItemForm.module.css'\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void;\n}\n\nexport const AddItemForm = React.memo((props: AddItemPropsType) => {\n\n    console.log('AddItemForm has called')\n    let [title, setTitle] = useState<string>('');\n    let [error, setError] = useState<boolean>(false);\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)  \n    }\n\n    const addTaskOnClick = () => {\n\n        if(title.trim() !== \"\" ) {\n          props.addItem(title.trim());\n          setTitle('');\n        } else {\n          setError(true);\n        }\n        \n      };\n    \n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\n    if(error !== false){\n        setError(false);\n    }\n    if (e.key === 'Enter') addTaskOnClick();\n    };\n\n    return(\n        <div className={style.itemForm}>\n            {/* <input\n            className={`${c.taskInput} ${error ? c.error: \"\"}`}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            /> */}\n          <TextField\n            size={'small'}\n            variant={'outlined'}\n            error={error}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            label={\"Title\"}\n            helperText={error && 'Title is required!'}\n            onBlur={ () => setError(false)}\n          />\n        {/* <button className={c.addTaskButton} onClick={addTaskOnClick}>\n          +\n        </button> */}\n        <IconButton onClick={addTaskOnClick} style={{width: '5px'}} color={'primary'}>\n          <AddBox \n            style={{marginLeft: '25px'}}\n          />\n        </IconButton>\n\n            {/* {error && <div className={c.errorMessage}>Title is required!</div>} */}\n      </div>\n    )\n})","import React, { ChangeEvent, useState, useCallback } from 'react';\n\n\n\ntype EditableSpanPropsType = {\n    title: string\n    onChangeTitle: (newValue: string) => void;\n  }\n  \nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  \n    console.log('Editable Span')\n    \n    let [editMode, setEditMode] = useState(false)\n    let [title, setTile] = useState('')\n\n    let activateEditMode = () => {\n        setTile(props.title)\n        setEditMode(true)\n    }\n\n    let deactivateEditMode = () => {\n        setEditMode(false)\n        props.onChangeTitle(title)\n    }\n    const onChangeTitleHandler = (e : ChangeEvent<HTMLInputElement>) => setTile(e.currentTarget.value);\n\n      return (    \n        editMode ?\n        <input value={title} onChange={onChangeTitleHandler} onBlur={deactivateEditMode} autoFocus></input> :\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\n      )\n  })","import { FilterValueType, TasksStateType } from '../AppWithRedux';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport { TodoListType } from '../AppWithRedux';\nimport { AccessTimeOutlined } from '@material-ui/icons';\nimport { AddTodolistActionType, RemoveTodolistActionType, } from './todolists-reducer';\n\ntype RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    todolistId: string\n    taskId: string\n}\ntype AddTaskActionType = {\n    type: 'ADD-TASK'\n    title: string\n    todolistId: string\n}\ntype ChangeTaskStatusActionType = {\n    type: 'CHANGE-TASK-STATUS'\n    isDone: boolean\n    todolistId: string\n    taskId: string\n} \ntype ChangeTaskTitleActionType = {\n    type: 'CHANGE-TASK-TITLE'\n    title: string\n    todolistId: string\n    taskId: string\n} \n\ntype ActionsType = RemoveTaskActionType | \n                   AddTaskActionType | \n                   ChangeTaskStatusActionType | \n                   ChangeTaskTitleActionType | \n                   AddTodolistActionType | \n                   RemoveTodolistActionType\n\n\nconst initialState: TasksStateType = {\n    // [todoListId_1] : [{ id: v1(), title: 'CSS', isDone: true },\n    //   { id: v1(), title: 'JS', isDone: true },\n    //   { id: v1(), title: 'React', isDone: false },\n    //   { id: v1(), title: 'HTML', isDone: false },],\n    // [todoListId_2] : [{ id: v1(), title: 'CSS', isDone: true },\n    //   { id: v1(), title: 'Book', isDone: true },\n    //   { id: v1(), title: 'Beer', isDone: false },\n    //   { id: v1(), title: 'Milk', isDone: false },],\n  }                \n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n\n    switch(action.type){\n\n        case 'REMOVE-TASK' : {\n            \n            const stateCopy = {...state}\n            const tasks = state[action.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = filteredTasks\n \n            return stateCopy;\n        }\n        case 'ADD-TASK' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            const newTask = {id: v1(), title: action.title, isDone: false}\n            const newTasks = [newTask, ...tasks];\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            \n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\n            \n            return stateCopy;\n        }\n        case 'CHANGE-TASK-TITLE' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n\n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, title: action.title} : t)\n            return stateCopy;\n        }\n        case 'ADD-TODOLIST' : {\n            const stateCopy = {...state}\n\n            stateCopy[action.todolistId] = []\n\n            return stateCopy\n        } \n        case \"REMOVE-TODOLIST\" : {\n            const stateCopy = {...state}\n            delete stateCopy[action.id]  // delete property\n            return stateCopy\n        } \n        \n        default: \n            return state;\n\n    }\n    \n}\n\n// Action Creators\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return {type: \"REMOVE-TASK\", todolistId, taskId}\n}\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\n    return {type: \"ADD-TASK\", title, todolistId}\n}\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\n    return {type: \"CHANGE-TASK-STATUS\", taskId, isDone, todolistId}\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\n    return {type: \"CHANGE-TASK-TITLE\", taskId, title, todolistId}\n}\n\n","import { FilterValueType } from './../AppWithRedux';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport { TodoListType } from '../AppWithRedux';\n\nexport type RemoveTodolistActionType = {\n    type: \"REMOVE-TODOLIST\"\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: \"ADD-TODOLIST\"\n    title: string\n    todolistId: string\n}\ntype ChangeTodolistTitleActionType = {\n    type: \"CHANGE-TODOLIST-TITLE\"\n    id: string\n    title: string\n}\ntype ChangeTodolistFilterActionType = {\n    type: \"CHANGE-TODOLIST-FILTER\",\n    id: string\n    filter: FilterValueType\n}\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\n\n\n//export let todoListId_1 = v1();\n//export let todoListId_2 = v1();\n\nconst initialState: Array<TodoListType> = [\n    // {id: todoListId_1, title: \"What to learn\", filter: 'all'},\n    // {id: todoListId_2, title: \"What to buy\", filter: 'all'},\n]\n\nexport const todolistsReducer = (state: Array<TodoListType> = initialState, action: ActionsType):Array<TodoListType> => {\n\n    switch(action.type){\n\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id != action.id)\n        }\n\n        case 'ADD-TODOLIST': {\n            return [{\n                id: action.todolistId,\n                title: action.title,\n                filter: 'all'\n            }, ...state]\n        }\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.title = action.title;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-TODOLIST-FILTER': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.filter = action.filter;\n            }\n            return [...state]\n        }\n            \n        default: \n            return state;\n\n    }\n    \n}\n\n// Action Creators\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n    return {type: \"REMOVE-TODOLIST\", id: todolistId}\n}\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: \"ADD-TODOLIST\", title: title, todolistId: v1()}\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: todolistId, title: title}\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValueType): ChangeTodolistFilterActionType => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter}\n}\n\n\n\n// For Practice\n//\n//\n// type StateType = {\n//     age: number\n//     childrenCount: number\n//     name: string\n// }\n// type ActionType = {\n//     type: string\n//     [key: string]: any\n// }\n\n// export const userReducer = (state: StateType, action: ActionType): StateType => {\n\n//     switch(action.type) {\n\n//         case \"INCREMENT-AGE\":\n//             let newState = {...state}\n//             newState.age = state.age + 1;\n//             return newState\n\n//         case \"INCREMENT-CHILDREN-COUNT\":\n            \n//         // another way to copy and return state\n//             return {\n//                 ...state,\n//                 childrenCount: state.childrenCount + 1\n//             }\n\n//         case \"CHANGE-NAME\":\n//             return {\n//                 ...state,\n//                 name: action.newName \n//             }\n            \n//         default:\n//             throw new Error(\"I don't know what to do\")\n//     }\n\n// }\n","import React, {useCallback} from 'react'\nimport { useDispatch } from 'react-redux';\nimport { changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from '../../Store/tasks-reducer';\nimport { TaskType } from '../../Todolist';\nimport { EditableSpan } from '../EditableSpan/EditableSpan';\nimport { Delete } from '@material-ui/icons';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport style from './Task.module.css';\n\ntype TaskPropsType = {\n    todolistId: string,\n    task: TaskType\n  \n  } \n  \nexport const Task = React.memo((props: TaskPropsType) => {\n    \n      const dispatch = useDispatch();  \n  \n      const onChangeTaskTitleHandler = useCallback((newValue: string) => {\n      dispatch(changeTaskTitleAC(props.task.id, newValue, props.todolistId))\n      }, [])\n  \n  return <div key={props.task.id} className={props.task.isDone ? \"isDone\" : \"\"}>\n    <div className={style.taskLine}>\n      <div>\n  \n        <Checkbox \n            color={'primary'}\n            checked={props.task.isDone} \n            // onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}}\n            onChange={ () => {dispatch(changeTaskStatusAC(props.task.id, !props.task.isDone, props.todolistId))}}\n            />\n        {/* <input onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}} type=\"checkbox\" checked={t.isDone} /> */}\n        \n        {/* <span>{t.title}</span> */}\n        <EditableSpan title={props.task.title} onChangeTitle={onChangeTaskTitleHandler}/>\n      \n      {/* Remove task Button */}\n  \n      </div>\n      {/* <div className={c.buttonRemoveTask}> */}\n      <div>\n        {/* <button\n          onClick={() => {\n            props.removeTask(t.id, props.id);\n          }}\n        >\n          X\n        </button> */}\n        <IconButton onClick={() => {\n            // props.removeTask(t.id, props.id);\n            dispatch(removeTaskAC(props.task.id, props.todolistId))\n          }}>\n          <Delete/>\n        </IconButton>\n      </div>\n    </div>\n  </div>\n  })","import React, { useCallback } from 'react';\nimport { preProcessFile, StringMappingType } from 'typescript';\nimport { v1 } from 'uuid';\nimport { FilterValueType,  TasksStateType} from './AppWithRedux';\nimport { AddItemForm } from './Components/AddItemForm/AddItemForm';\nimport c from './Todolist.module.css';\nimport {EditableSpan} from './Components/EditableSpan/EditableSpan';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './Store/tasks-reducer';\nimport { changeTodolistFilterAC, changeTodolistTitleAC } from './Store/todolists-reducer';\nimport { Task } from './Components/Task/Task';\n\nexport type TaskType = {\n  id: string;\n  title: string;\n  isDone: boolean;\n};\n\ntype PropsTypeTodolist = {\n  todolistId: string; \n  title: string;\n  filter: FilterValueType;\n  //tasks: TasksStateType;\n  //addTask: (title: string, id: string) => void;\n  //addToDoList: (title: string, id?: string) => void;\n  //removeTask: (id: string, todoListId: string) => void;\n  //changeFilter: (todoListId: string, filter: FilterValueType) => void;\n  //changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void;\n  //changeTitle: (taskId: string, newTitle: string, todoListId: string) => void;\n  changeTodoListTitle: (newTitle: string, todoListId: string) => void;\n  removeTodoList: (id: string) => void;\n  // onChangeTitle: (newValue: string) => void;\n};\n\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\n\n  console.log('ToDolist Called')\n  const tasks = useSelector<AppRootState, Array<TaskType>>( state => state.tasks[props.todolistId])\n  const dispatch = useDispatch();\n\n  // Filter functions\n  const showAll = useCallback(() => {\n    //props.changeFilter(props.id, 'all');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'all'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n  \n  const showActive = useCallback(() => {\n    //props.changeFilter(props.id, 'active');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'active'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n  \n  const showCompleted = useCallback(() => {\n    //props.changeFilter(props.id, 'completed');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'completed'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n\n  const removeTodoList = useCallback(() => {\n    props.removeTodoList(props.todolistId);\n  },[props.removeTodoList, props.todolistId]);\n\n  const changeTodoListTileHandler = useCallback((newValue: string) => {\n    //props.changeTodoListTitle(props.id, newValue)\n    dispatch(changeTodolistTitleAC(props.todolistId, newValue))\n  }, [changeTodolistTitleAC, props.todolistId]);\n\n  const addTask = useCallback((title: string) => {\n    dispatch(addTaskAC(title, props.todolistId))\n  },[props.todolistId, addTaskAC])\n\n\n    // We gonna show task only depends what filter selected\n    let tasksForTodoList = tasks;\n    if (props.filter === 'completed') {\n      tasksForTodoList = tasks.filter((t) => t.isDone === true);\n    }\n    if (props.filter === 'active') {\n      tasksForTodoList = tasks.filter((t) => t.isDone === false);\n    }\n\n\n  return (\n    \n      <div>\n      \n      <div className={c.titleDiv}>\n        <EditableSpan title={props.title} onChangeTitle={changeTodoListTileHandler}/>\n        <IconButton onClick={removeTodoList}>\n                  <Delete/>\n      </IconButton>\n        {/* <h3 className={c.title}>{props.title}</h3> */}\n      </div>\n      \n\n      <AddItemForm addItem={addTask}/> \n      {/* addItem={props.addTask} todoListId={props.id}/> */}\n\n      <div>\n        {\n            tasksForTodoList.map( t => <Task \n                                          task={t} \n                                          todolistId={props.todolistId} \n                                          key={t.id}\n                                        />)\n        }\n      </div>\n\n      <div>\n        {/* Without material-ui using CSS only */}\n        {/* <button className={props.filter === \"all\" ? \"activeFilter\" : \"\"} onClick={showAll}>All</button>\n        <button className={props.filter === \"active\" ? \"activeFilter\" : \"\"} onClick={showActive}>Active</button>\n        <button className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} onClick={showCompleted}>Completed</button> */}\n\n        {/* Using material-ui */}\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            variant={props.filter === \"all\" ? \"contained\" : 'outlined'}\n            color={'primary'}\n            //className={props.filter === \"all\" ? \"activeFilter\" : \"\"} \n            onClick={showAll}>All</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            color={'primary'}\n            variant={props.filter === \"active\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"active\" ? \"activeFilter\" : \"\"} \n            onClick={showActive}>Active</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px', width: '100px'}}\n            color={'primary'}\n            variant={props.filter === \"completed\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} \n            onClick={showCompleted}>Completed</Button>\n      </div>\n    </div>\n  );\n})\n\n\n","import React, {useCallback} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TaskType, Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { AddItemForm } from './Components/AddItemForm/AddItemForm';\nimport { EditableSpan } from './Components/EditableSpan/EditableSpan';\nimport { AppBar, Button, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\nimport { Menu } from '@material-ui/icons';\nimport { addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC, todolistsReducer } from './Store/todolists-reducer';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer } from './Store/tasks-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\n\nexport type FilterValueType = 'all' | 'completed' | 'active';\n\nexport type TodoListType = {\n  id: string;\n  title: string;\n  filter: FilterValueType;\n}\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n  console.log('App Called');\n  \n\n  const dispatch = useDispatch();\n  const todoLists = useSelector<AppRootState, Array<TodoListType>>( state => state.todolist)\n  \n\n  // Change title with useCallback\n  const changeTodoListTitle = useCallback((todoListId: string, newTitle: string) => {\n    dispatch(changeTodolistTitleAC(todoListId, newTitle))\n  }, [dispatch])\n\n  //remove todolist with useCallback\n  const removeTodoList = useCallback((todoListId: string) => {\n    \n    const action = removeTodolistAC(todoListId)\n    dispatch(action)\n  }, [dispatch])\n\n\n  // Add to Do list callBack function with useCallback\n  const addToDolist = useCallback((title: string) => {\n    dispatch(addTodolistAC(title))\n  }, [dispatch]);\n\n\n  const todoListsComponents = todoLists.map( (td) => {\n\n    return (\n          <Grid item key={td.id}>\n              <Paper elevation={5} style={{padding: '20px'}}>\n                <Todolist\n                  \n                  todolistId={td.id}\n                  title={td.title}\n                  filter={td.filter}            \n                  //tasks={tasks}\n                  //removeTask={removeTask}\n                  //addTask={addTask}\n                  //changeFilter={changeFilter}\n                  //changeStatus={changeStatus}\n                  removeTodoList={removeTodoList}\n                  //changeTitle={changeTitle}\n                  changeTodoListTitle={changeTodoListTitle}\n                />\n          </Paper>\n          </Grid>\n    )\n  })\n\n   return ( \n   <div className=\"App\">\n     \n       <AppBar position={'static'}>\n               <Toolbar style={{justifyContent: 'space-between'}}>\n                   <IconButton color={'inherit'}>\n                       <Menu />\n                   </IconButton>\n                   <Typography variant={'h6'}>\n                     TodoLists\n                   </Typography> \n                   <Button variant={'outlined'} \n                             color={'inherit'}>\n                     Login\n                   </Button>  \n               </Toolbar>\n       </AppBar> \n\n       {/* <div className=\"Title\"> */}\n         {/* <h3>Add NEW ToDoList</h3> */}\n\n         {/* <EditableSpan title={\"Add NEW ToDoList\"}/>  */}\n\n           <Grid container style={{padding: '20px'}}>\n              \n              <AddItemForm addItem={addToDolist} />\n           </Grid>\n           <Grid container spacing={3} style={{padding: '20px'}}>\n              {todoListsComponents}\n           </Grid>\n\n           \n       {/* </div> */}\n       {/* <div className=\"ToDoLists\"> */}\n  </ div> )\n           {/* {todoLists.map( (td) => {\n\n//             let tasksForTodoList = tasksObj[td.id];\n//             if (td.filter === 'completed') {\n//               tasksForTodoList = tasksForTodoList.filter((t) => t.isDone === true);\n//             }\n//             if (td.filter === 'active') {\n//               tasksForTodoList = tasksForTodoList.filter((t) => t.isDone === false);\n//             } */}\n          \n//                   return ( <div> \n                     \n//                   <Grid container>\n//                     <Todolist\n//                         key={td.id}\n//                         id={td.id}\n//                         title={td.title}\n//                         filter={td.filter}            \n//                         tasks={tasksForTodoList}\n//                         removeTask={removeTask}\n//                         addTask={addTask}\n//                         changeFilter={changeFilter}\n//                         changeStatus={changeStatus}\n//                         removeTodoList={removeTodoList}\n//                         changeTitle={changeTitle}\n//                         changeTodoListTitle={changeTodoListTitle}\n//                       />    \n//                   </Grid>    \n//                 </div>)\n//             } ) \n//           }\n//       </div>\n\n\n//     </div>\n//   )\n}\nexport default AppWithRedux;\n","import { combineReducers, createStore } from \"redux\";\nimport { tasksReducer } from \"./tasks-reducer\";\nimport { todolistsReducer } from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers({\n    todolist: todolistsReducer,\n    tasks: tasksReducer\n});\n\n// type AppRootState = {\n//     todolist: Array<TodoListType>\n//     tasks: TasksStateType\n// }\n\n// Same as what above, but more practical\nexport type AppRootState = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer);\n\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport AppWithRedux from './AppWithRedux';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <AppWithReducers /> */}\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>\n    \n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}