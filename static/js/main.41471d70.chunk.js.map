{"version":3,"sources":["api/todolist-api.tsx","reportWebVitals.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Store/todolists-reducer.ts","Store/app-reducer.ts","Store/tasks-reducer.ts","utils/error-utils.ts","Components/Task/Task.tsx","Todolist.tsx","Components/ErrorSnackbar/errorSnackbar.tsx","AppWithRedux.tsx","Store/store.tsx","index.tsx","Components/AddItemForm/AddItemForm.module.css","Todolist.module.css","Components/Task/Task.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTaskOnClick","trim","addItem","className","style","itemForm","TextField","disabled","disable","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","onBlur","IconButton","onClick","width","color","AddBox","marginLeft","EditableSpan","editMode","setEditMode","setTile","onChangeTitle","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","ResponseStatuses","todolistAPI","get","post","todoId","delete","put","todolistId","taskId","model","initialState","status","setAppStatusAC","type","setAppErrorAC","createTaskThunkCreator","dispatch","res","data","resultCode","task","item","addTaskAC","messages","length","changeTodolistTitleAC","id","changeTodolistFilterAC","filter","createTodolistThunkCreator","success","todo","todolist","errorMessage","handleServerAppError","catch","err","message","handleServerNetworkError","Task","useDispatch","onChangeTaskTitleHandler","useCallback","newValue","getState","clickedTask","tasks","find","t","description","startDate","priority","deadline","changeTaskTitleAC","onChangeHandler","newIsDoneValue","checked","Completed","New","changeTaskStatusAC","taskLine","Checkbox","removeTaskAC","Delete","Todolist","useSelector","state","useEffect","fetchTasksAC","items","showAll","showActive","showCompleted","removeTodoList","changeTodoListTileHandler","addTask","tasksForTodoList","c","titleDiv","entityStatus","map","Button","margin","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","todoLists","todolists","changeTodoListTitle","todoListId","newTitle","addToDolist","todoListsComponents","td","Grid","Paper","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","LinearProgress","container","spacing","rootReducer","combineReducers","action","tl","todolistToUpdate","stateCopy","forEach","filteredTasks","newTasks","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.41471d70.chunk.js","sourcesContent":["import axios from 'axios'\nimport React, {useCallback} from 'react'\nimport { DeleteTodolist } from '../Store/todolists-api.stories'\n\nconst instance = axios.create({\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n   withCredentials: true,\n    headers: {\n        'API-KEY': 'cb837fe2-1523-4fe4-be8e-89a2fb123dce'\n    } \n})\n\n\nexport type TodoListType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n\n//type\n// type TodoType = {\n//     id: string\n//     title: string\n//     addedDate: string\n//     order: number\n// }\n\n// export const todolistAPI = {\n\n//     getTodos() {\n//         return instance.get<TodoType[]>('todo-lists')\n//     },\n\n//     createTodo(title: string) {\n//         return instance.post<CommonResponseType<{item: TodoType}>>('todo-lists', {title})\n//     },\n\n//     deleteTodo(todoId: string) {\n//         return instance.delete<CommonResponseType>(`todo-lists/${todoId}`)\n//     },\n\n//     updateTodoTitle(todoId: string, title: string){\n//         return instance.put<CommonResponseType>(`todo-lists/${todoId}`, {title})\n//     }\n// }\n\n// Without types\n\nexport const todolistAPI = {\n\n    getTodos() {\n        //return instance.get('todo-lists')\n        const promise = instance.get<TodoListType[]>('todo-lists');\n        return promise;\n    },\n\n    createTodo(title: string) {\n        //return instance.post('todo-lists', {title})\n        const promise = instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\n        return promise;\n    },\n\n    deleteTodo(todoId: string) {\n        //return instance.delete(`todo-lists/${todoId}`)\n        const promise = instance.delete<ResponseType>(`todo-lists/${todoId}`);\n        return promise;\n    },\n\n    updateTodoTitle(todoId: string, title: string){\n        //return instance.put(`todo-lists/${todoId}`, {title})\n        const promise = instance.put<ResponseType>(`todo-lists/${todoId}`, {title: title});\n        return promise;\n    },\n\n    getTasks(todolistId: string){\n        //return instance.get(`todo-lists/${todoId}/tasks`)\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n\n    deleteTask(todolistId: string, taskId: string){\n        //return instance.delete(`todo-lists/${todoId}/tasks/${taskId}`)\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n\n    createTask(todolistId: string, title: string) {\n        //return instance.post(`todo-lists/${todoId}/tasks`, {title})\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title});\n    },\n\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        //return instance.post(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n\n\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\nimport { Button, IconButton, TextField } from '@material-ui/core';\nimport c from '../../Todolist.module.css';\nimport { AddBox } from '@material-ui/icons';\nimport { useDispatch } from 'react-redux';\nimport { addTaskAC } from '../../Store/tasks-reducer';\nimport { v1 } from 'uuid';\nimport style from './AddItemForm.module.css'\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void;\n    disable: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemPropsType) => {\n\n    console.log('AddItemForm has called')\n    let [title, setTitle] = useState<string>('');\n    let [error, setError] = useState<boolean>(false);\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)  \n    }\n\n    const addTaskOnClick = () => {\n\n        if(title.trim() !== \"\" ) {\n          props.addItem(title.trim());\n          setTitle('');\n        } else {\n          setError(true);\n        }\n        \n      };\n    \n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\n    if(error !== false){\n        setError(false);\n    }\n    if (e.key === 'Enter') addTaskOnClick();\n    };\n\n    return(\n        <div className={style.itemForm}>\n            {/* <input\n            className={`${c.taskInput} ${error ? c.error: \"\"}`}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            /> */}\n          <TextField\n            disabled={props.disable}\n            size={'small'}\n            variant={'outlined'}\n            error={error}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            label={\"Title\"}\n            helperText={error && 'Title is required!'}\n            onBlur={ () => setError(false)}\n          />\n        {/* <button className={c.addTaskButton} onClick={addTaskOnClick}>\n          +\n        </button> */}\n        <IconButton disabled={props.disable} onClick={addTaskOnClick} style={{width: '5px'}} color={'primary'}>\n          <AddBox \n            style={{marginLeft: '25px'}}\n          />\n        </IconButton>\n\n            {/* {error && <div className={c.errorMessage}>Title is required!</div>} */}\n      </div>\n    )\n})","import React, { ChangeEvent, useState, useCallback } from 'react';\n\n\n\ntype EditableSpanPropsType = {\n    title: string\n    onChangeTitle: (newValue: string) => void;\n  }\n  \nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  \n    console.log('Editable Span')\n    \n    let [editMode, setEditMode] = useState(false)\n    let [title, setTile] = useState('')\n\n    let activateEditMode = () => {\n        setTile(props.title)\n        setEditMode(true)\n    }\n\n    let deactivateEditMode = () => {\n        setEditMode(false)\n        props.onChangeTitle(title)\n    }\n    const onChangeTitleHandler = (e : ChangeEvent<HTMLInputElement>) => setTile(e.currentTarget.value);\n\n      return (    \n        editMode ?\n        <input value={title} onChange={onChangeTitleHandler} onBlur={deactivateEditMode} autoFocus></input> :\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\n      )\n  })","import { FilterValueType } from './../AppWithRedux';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport  { Dispatch } from 'redux'\nimport { AppRootState } from './store';\nimport { todolistAPI, TodoListType } from '../api/todolist-api';\nimport { act } from 'react-dom/test-utils';\nimport { AccessTimeOutlined } from '@material-ui/icons';\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from './app-reducer';\nimport { AxiosError } from 'axios';\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\n\n// Old way for types\n\n// export type RemoveTodolistActionType = {\n//     type: \"REMOVE-TODOLIST\"\n//     id: string\n// }\n// export type AddTodolistActionType = {\n//     type: \"ADD-TODOLIST\"\n//     title: string\n//     todolistId: string\n// }\n// type ChangeTodolistTitleActionType = {\n//     type: \"CHANGE-TODOLIST-TITLE\"\n//     id: string\n//     title: string\n// }\n// type ChangeTodolistFilterActionType = {\n//     type: \"CHANGE-TODOLIST-FILTER\",\n//     id: string\n//     filter: FilterValueType\n// }\n\n// Types for export\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodoListActionType = ReturnType<typeof setTodoListsAC>\n\n// Action type\ntype ActionsType =  |\n                    RemoveTodolistActionType | \n                    AddTodolistActionType | \n                    ReturnType<typeof changeTodolistTitleAC> | \n                    ReturnType<typeof changeTodolistFilterAC> |\n                    SetTodoListActionType |\n                    ReturnType<typeof cnangeTodoListEntityStatus>\n\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodolistDomainType = TodoListType & {\n    filter: FilterValuesType;\n    entityStatus: RequestStatusType;\n}\n// Initial state empty array\nconst initialState: Array<TodolistDomainType> = []\n\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType):Array<TodolistDomainType> => {\n\n    switch(action.type){\n\n        case 'SET-TODOLISTS': {\n            \n            return action.todolists.map( (tl) => {\n                return {...tl, filter: 'all', entityStatus: 'idle'}\n            }) \n        }\n\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id != action.id)\n        }\n\n        case 'ADD-TODOLIST': {\n\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n        }\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.title = action.title;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-TODOLIST-FILTER': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.filter = action.filter;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-ENTITY-STATUS': {\n            return state.map( tl => tl.id === action.todolistId ? {...tl, filter: 'all', entityStatus: action.entityStatus} : tl)\n                //return {...tl, filter: 'all', entityStatus: tl.id === action.todolistId ? action.entityStatus : 'idle'}})\n        }\n            \n        default: \n            return state;\n\n    }\n    \n}\n\n\n// Action Creators\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {type: \"REMOVE-TODOLIST\", id: todolistId} as const\n}\nexport const addTodolistAC = (todolist: TodoListType) => {\n    return {type: \"ADD-TODOLIST\", todolist} as const\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: todolistId, title: title} as const\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValueType) => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter} as const\n}\nexport const setTodoListsAC = (todolists: Array<TodoListType>) => {\n    return {type: \"SET-TODOLISTS\", todolists} as const\n}\nexport const cnangeTodoListEntityStatus = (todolistId: string, entityStatus: RequestStatusType) => {\n    return {type: \"CHANGE-ENTITY-STATUS\" , todolistId, entityStatus} as const\n}\n\n\n// Response code from Server \nenum ResponseStatuses {\n    success = 0,\n    error = 1,\n    captcha = 10\n}\n\n//\n//thunk creators\n//\nexport const fetchTodolistsThunkCreator = () => (dispatch: Dispatch, getState: () => AppRootState) => {\n\n    // 1 server requests\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n    todolistAPI.getTodos()\n      .then( (res) => {\n         \n        // 2 dispatch actions\n        dispatch(setTodoListsAC(res.data))\n        dispatch(setAppStatusAC('succeeded')) // Preloader OFF \n      } ) \n}\n\nexport const createTodolistThunkCreator = (title: string) => (dispatch: Dispatch) => {\n\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n    todolistAPI.createTodo(title)\n        .then( (res) => {\n            //  debugger\n            if (res.data.resultCode === ResponseStatuses.success){\n                \n                const todo = res.data.data.item\n                dispatch(addTodolistAC(todo))\n\n            } else {\n                handleServerAppError(dispatch, res.data) // Func from error-utils.ts\n            }\n        })\n        .catch( (err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message) // Func from error-utils.ts\n        })\n        \n\n}\n\nexport const deleteTodolistThunkCreator = (todoId: string) => (dispatch: Dispatch) => {\n\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n\n    dispatch(cnangeTodoListEntityStatus(todoId, 'loading')) // To disable the button after Delete has pressed\n    todolistAPI.deleteTodo(todoId)\n        .then( (res) => {\n            // debugger\n            if (res.data.resultCode === ResponseStatuses.success){\n                dispatch(removeTodolistAC(todoId))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF \n            }\n        })\n}\n\nexport const updateTodoTitleThunkCreator = (todoId: string, title: string) => (dispatch: Dispatch) => {\n\n    todolistAPI.updateTodoTitle(todoId, title)\n        .then( (res) => {\n            // debugger\n            if (res.data.resultCode === ResponseStatuses.success){\n                dispatch(changeTodolistTitleAC(todoId, title))\n            }\n        })\n}\n\n","import { AccessTimeOutlined } from '@material-ui/icons';\nimport React from 'react';\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed' ;\n\n\nconst initialState = { \n\n   status: 'idle' as RequestStatusType,\n   error: null as string | null \n} \n\ntype InitialStateType = typeof initialState \n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => { \n\n   switch (action.type) { \n\n       case 'APP/SET-STATUS': \n\n           return {...state, status: action.status} \n\n        case 'APP/ERROR-RESET': {\n            return {...state, error: action.error}\n        }\n\n       default: \n\n           return state \n\n   } \n\n} \n\n// Action creator\nexport const setAppStatusAC = (status: RequestStatusType) => {\n    return {\n        type: 'APP/SET-STATUS',\n        status\n    } as const \n}\n\nexport const setAppErrorAC = (error: string | null) => {\n    return {\n        type: 'APP/ERROR-RESET',\n        error\n    } as const\n}\n\ntype ActionsType = | \n                    ReturnType<typeof setAppStatusAC> |\n                    ReturnType<typeof setAppErrorAC>","\nimport { AppRootState } from './store';\n// import { TaskType } from './../Todolist';\nimport { FilterValueType, TasksStateType } from '../AppWithRedux';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport  { Dispatch } from 'redux'\nimport { AccessTimeOutlined } from '@material-ui/icons';\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodoListActionType, } from './todolists-reducer';\nimport { TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType } from '../api/todolist-api';\nimport { setAppErrorAC, setAppStatusAC } from './app-reducer';\n\n\n\n//Action type\ntype ActionsType = |\n                    ReturnType<typeof removeTaskAC> | \n                    ReturnType<typeof addTaskAC> | \n                    ReturnType<typeof  changeTaskStatusAC> | \n                    ReturnType<typeof changeTaskTitleAC> | \n                    AddTodolistActionType | \n                    RemoveTodolistActionType | \n                    SetTodoListActionType |\n                    ReturnType<typeof fetchTasksAC>\n\n//export type TaskStatuses = number;\n\n// Initial state\nconst initialState: TasksStateType = {\n    // [todoListId_1] : [{ id: v1(), title: 'CSS', isDone: true },\n    //   { id: v1(), title: 'JS', isDone: true },\n    //   { id: v1(), title: 'React', isDone: false },\n    //   { id: v1(), title: 'HTML', isDone: false },],\n    // [todoListId_2] : [{ id: v1(), title: 'CSS', isDone: true },\n    //   { id: v1(), title: 'Book', isDone: true },\n    //   { id: v1(), title: 'Beer', isDone: false },\n    //   { id: v1(), title: 'Milk', isDone: false },],\n  }                \n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n\n    switch(action.type){\n\n        \n        case 'SET-TODOLISTS':{\n            const stateCopy = {...state}\n            action.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            }) \n            \n            return stateCopy;\n        }\n        \n        case 'SET-TUSKS': {\n            const stateCopy = {...state}\n            stateCopy[action.todoId] = action.tasks\n            return stateCopy\n        }\n\n        case 'REMOVE-TASK' : {\n            \n            const stateCopy = {...state}\n            const tasks = state[action.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = filteredTasks\n \n            return stateCopy;\n        }\n        case 'ADD-TASK' : {\n            \n            const stateCopy = {...state};\n            const tasks = stateCopy[action.task.todoListId];\n            const newTasks = [action.task, ...tasks];\n            stateCopy[action.task.todoListId] = newTasks;\n            \n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            \n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, status: action.status} : t)\n            \n            return stateCopy;\n        }\n        case 'CHANGE-TASK-TITLE' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n\n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, title: action.title} : t)\n            return stateCopy;\n        }\n        case 'ADD-TODOLIST' : {\n            const stateCopy = {...state}\n\n            stateCopy[action.todolist.id] = []\n\n            return stateCopy\n        } \n        case \"REMOVE-TODOLIST\" : {\n            const stateCopy = {...state}\n            delete stateCopy[action.id]  // delete property\n            return stateCopy\n        } \n        \n        default: \n            return state;\n\n    }\n    \n}\n\n// Action Creators\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n    return {type: \"REMOVE-TASK\", todolistId, taskId} as const\n}\nexport const addTaskAC = (task: TaskType) => {\n    return {type: \"ADD-TASK\", task} as const\n}\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => {\n    return {type: \"CHANGE-TASK-STATUS\", taskId, status, todolistId} as const\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {type: \"CHANGE-TASK-TITLE\", taskId, title, todolistId} as const\n}\n\nexport const fetchTasksAC = (todoId: string, tasks: Array<TaskType>) => {\n    return {type: 'SET-TUSKS', todoId, tasks} as const\n}\n\n//\n//Thunk creator\n//\nexport const fetchTasksThunkCreator = (todoId: string) => {\n\n    return (dispatch: Dispatch) => {\n\n        todolistAPI.getTasks(todoId)\n            .then((res)=> {\n\n                dispatch(fetchTasksAC(todoId, res.data.items))\n            }) \n    }\n}\n\nexport const deleteTaskThunkCreator = (todoId: string, taskId: string) => {\n    return (dispatch: Dispatch) => {\n\n        dispatch(setAppStatusAC('loading'))\n        todolistAPI.deleteTask(todoId, taskId)\n            .then( (res) => {\n                \n                if (res.data.resultCode === 0){\n                    dispatch(removeTaskAC(taskId, todoId))\n                    dispatch(setAppStatusAC('succeeded'))\n                }\n            })\n    }\n}\n\nexport const createTaskThunkCreator = (todoId: string, title: string) => {\n    return (dispatch: Dispatch) => {\n\n        dispatch(setAppStatusAC('loading'))\n        todolistAPI.createTask(todoId, title)\n            .then( (res) => {\n                // debugger\n                if (res.data.resultCode === 0){\n                    const task = res.data.data.item\n                    \n                    dispatch(addTaskAC(task))\n                    dispatch(setAppStatusAC('succeeded'))\n                } else {\n                    // Check if message has any ite,s at all\n                    if(res.data.messages.length){\n                        dispatch(setAppErrorAC(res.data.messages[0]))    \n                    } else {\n                        dispatch(setAppErrorAC('Some error occurred'))    \n                    }\n                    dispatch(setAppStatusAC('failed'))\n                }\n            })\n    }\n}\n\nexport const updateTaskStatusThunkCreator = (todoId: string, taskId: string, status: TaskStatuses) => {\n    return (dispatch: Dispatch, getState: () => AppRootState ) => {\n\n        const state = getState();\n        const allTasks = state.tasks;\n        const allTasksForClickedTodo = allTasks[todoId]\n        const clickedTask = allTasksForClickedTodo.find( (t) => {\n            return t.id === taskId\n        }) \n\n        //const model: any = {...clickedTask, status}\n        \n        if(clickedTask) {\n\n            const model: UpdateTaskModelType = {\n                title: clickedTask.title,\n                status: status,\n                description: clickedTask.description,\n                startDate: clickedTask.startDate,\n                priority: clickedTask.priority,\n                deadline: clickedTask.deadline\n            }\n\n            todolistAPI.updateTask(todoId, taskId, model)\n            .then( (res) => {\n                dispatch(changeTaskStatusAC(taskId, status, todoId))\n            })\n        }\n    }\n}\n\nexport const updateTaskTitleTC = (todoId: string, taskId: string, title: string) => {\n    return (dispatch: Dispatch, getState: () => AppRootState ) => {\n\n        const state = getState();\n        const allTasks = state.tasks;\n        const allTasksForClickedTodo = allTasks[todoId]\n        const clickedTask = allTasksForClickedTodo.find( (t) => {\n            return t.id === taskId\n        }) \n\n        //const model: any = {...clickedTask, status}\n        \n        if(clickedTask) {\n\n            //@ts-ignore\n            const model: UpdateTaskModelType = {\n                title: title,\n                status: clickedTask.status,\n                description: clickedTask.description,\n                startDate: clickedTask.startDate,\n                priority: clickedTask.priority,\n                deadline: clickedTask.deadline\n            }\n\n            dispatch(setAppStatusAC('loading'))\n            todolistAPI.updateTask(todoId, taskId, model)\n            .then( (res) => {\n                dispatch(changeTaskTitleAC(taskId, title, todoId))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n        }\n    }\n}","import React from 'react'\nimport { setAppErrorAC, setAppStatusAC } from '../Store/app-reducer'\nimport { Dispatch } from 'redux'\nimport {ResponseType} from './../api/todolist-api'\n\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorActionsType>, message: string) => {\n    \n    dispatch(setAppErrorAC(message)) // Error Message to show \n    dispatch(setAppStatusAC('failed')) // Preloader OFF\n\n}\n\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorActionsType>, data: ResponseType<T>) => {\n\n    if(data.messages.length){\n        \n        const errorMessage = data.messages[0] \n        dispatch(setAppErrorAC(errorMessage)) // Error Message to show    \n    \n    } else {\n        dispatch(setAppErrorAC('Some error occurred')) // Error Message to show    \n    }\n    dispatch(setAppStatusAC('failed')) // Preloader OFF\n\n}                             \n\n// DIspatch Type\nexport type ErrorActionsType =  ReturnType<typeof setAppStatusAC> |\n                                ReturnType<typeof setAppErrorAC>\n","import React, {useCallback, ChangeEvent} from 'react'\nimport { useDispatch } from 'react-redux';\nimport { changeTaskStatusAC, changeTaskTitleAC, deleteTaskThunkCreator, removeTaskAC, updateTaskStatusThunkCreator, updateTaskTitleTC } from '../../Store/tasks-reducer';\nimport { EditableSpan } from '../EditableSpan/EditableSpan';\nimport { Delete } from '@material-ui/icons';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport style from './Task.module.css';\nimport { TaskStatuses, TaskType } from '../../api/todolist-api';\n\ntype TaskPropsType = {\n    todolistId: string,\n    task: TaskType\n  } \n  \nexport const Task = React.memo((props: TaskPropsType) => {\n\n      \n      const dispatch = useDispatch();  \n  \n      const onChangeTaskTitleHandler = useCallback((newValue: string) => {\n          //dispatch(changeTaskTitleAC(props.task.id, newValue, props.todolistId))\n          dispatch(updateTaskTitleTC(props.todolistId, props.task.id, newValue))\n      }, [])\n\n      const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        //props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n        dispatch(updateTaskStatusThunkCreator(props.todolistId, props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New))\n\n    }, [props.task.id, props.todolistId]);\n\n  \n  return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\n    <div className={style.taskLine}>\n      <div>\n  \n        <Checkbox \n            color={'primary'}\n            checked={props.task.status === TaskStatuses.Completed} \n            // onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}}\n            onChange={onChangeHandler}\n            />\n        {/* <input onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}} type=\"checkbox\" checked={t.isDone} /> */}\n        \n        {/* <span>{t.title}</span> */}\n        <EditableSpan title={props.task.title} onChangeTitle={onChangeTaskTitleHandler}/>\n      \n      {/* Remove task Button */}\n  \n      </div>\n      {/* <div className={c.buttonRemoveTask}> */}\n      <div>\n        {/* <button\n          onClick={() => {\n            props.removeTask(t.id, props.id);\n          }}\n        >\n          X\n        </button> */}\n        <IconButton onClick={() => {\n            dispatch(deleteTaskThunkCreator(props.todolistId, props.task.id))\n        }}>\n          <Delete/>\n        </IconButton>\n      </div>\n    </div>\n  </div>\n  })","import React, { useCallback, useEffect } from 'react';\nimport { preProcessFile, StringMappingType } from 'typescript';\nimport { v1 } from 'uuid';\nimport { FilterValueType,  TasksStateType} from './AppWithRedux';\nimport { AddItemForm } from './Components/AddItemForm/AddItemForm';\nimport c from './Todolist.module.css';\nimport {EditableSpan} from './Components/EditableSpan/EditableSpan';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, createTaskThunkCreator, fetchTasksThunkCreator, removeTaskAC } from './Store/tasks-reducer';\nimport { changeTodolistFilterAC, changeTodolistTitleAC, updateTodoTitleThunkCreator } from './Store/todolists-reducer';\nimport { Task } from './Components/Task/Task';\nimport { TaskStatuses, TaskType } from './api/todolist-api';\nimport { RequestStatusType } from './Store/app-reducer';\n\n// export type TaskType = {\n//   todoListId: string;\n//   id: string;\n//   title: string;\n//   status: TaskStatuses;\n// };\n\ntype PropsTypeTodolist = {\n  todolistId: string; \n  title: string;\n  filter: FilterValueType;\n  changeTodoListTitle: (newTitle: string, todoListId: string) => void;\n  removeTodoList: (id: string) => void;\n  entityStatus: RequestStatusType;\n};\n\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\n\n  console.log('ToDolist Called')\n  const tasks = useSelector<AppRootState, Array<TaskType>>( state => state.tasks[props.todolistId])\n  const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    dispatch(fetchTasksThunkCreator(props.todolistId))\n  }, [])\n\n\n  // Filter functions\n  const showAll = useCallback(() => {\n    //props.changeFilter(props.id, 'all');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'all'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n  \n  const showActive = useCallback(() => {\n    //props.changeFilter(props.id, 'active');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'active'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n  \n  const showCompleted = useCallback(() => {\n    //props.changeFilter(props.id, 'completed');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'completed'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n\n  const removeTodoList = useCallback(() => {\n    props.removeTodoList(props.todolistId);\n  },[props.removeTodoList, props.todolistId]);\n\n  const changeTodoListTileHandler = useCallback((newValue: string) => {\n    //props.changeTodoListTitle(props.id, newValue)\n    //dispatch(changeTodolistTitleAC(props.todolistId, newValue))\n    dispatch(updateTodoTitleThunkCreator(props.todolistId, newValue));\n\n  }, [changeTodolistTitleAC, props.todolistId]);\n\n  const addTask = useCallback((title: string) => {\n    //dispatch(addTaskAC(title, props.todolistId))\n    dispatch(createTaskThunkCreator(props.todolistId, title))\n  },[props.todolistId, createTaskThunkCreator])\n\n\n    // We gonna show task only depends what filter selected\n    let tasksForTodoList = tasks;\n    if (props.filter === 'completed') {\n      tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.Completed);\n    }\n    if (props.filter === 'active') {\n      tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.New);\n    }\n\n\n  return (\n    \n      <div>\n      \n      <div className={c.titleDiv}>\n        <EditableSpan title={props.title} onChangeTitle={changeTodoListTileHandler}/>\n        \n        {/* Delete Button */}\n        <IconButton onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\n                  <Delete/>\n        </IconButton>\n        \n        {/* <h3 className={c.title}>{props.title}</h3> */}\n      </div>\n      \n\n      <AddItemForm addItem={addTask} disable={props.entityStatus === 'loading'}/> \n      {/* addItem={props.addTask} todoListId={props.id}/> */}\n\n      <div>\n        {\n            tasksForTodoList.map( t => <Task \n                                          task={t} \n                                          todolistId={props.todolistId} \n                                          key={t.id}\n                                        />)\n        }\n      </div>\n\n      <div>\n        {/* Without material-ui using CSS only */}\n        {/* <button className={props.filter === \"all\" ? \"activeFilter\" : \"\"} onClick={showAll}>All</button>\n        <button className={props.filter === \"active\" ? \"activeFilter\" : \"\"} onClick={showActive}>Active</button>\n        <button className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} onClick={showCompleted}>Completed</button> */}\n\n        {/* Using material-ui */}\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            variant={props.filter === \"all\" ? \"contained\" : 'outlined'}\n            color={'primary'}\n            //className={props.filter === \"all\" ? \"activeFilter\" : \"\"} \n            onClick={showAll}>All</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            color={'primary'}\n            variant={props.filter === \"active\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"active\" ? \"activeFilter\" : \"\"} \n            onClick={showActive}>Active</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px', width: '100px'}}\n            color={'primary'}\n            variant={props.filter === \"completed\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} \n            onClick={showCompleted}>Completed</Button>\n      </div>\n    </div>\n  );\n})\n\n\n","import React from 'react' \nimport Snackbar from '@material-ui/core/Snackbar' \nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert' \nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppRootState } from '../../Store/store'\nimport { setAppErrorAC } from '../../Store/app-reducer'\n\n \n\nfunction Alert(props: AlertProps) { \n\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} /> \n\n} \n\n \nexport function ErrorSnackbar() { \n\n   \n   const error = useSelector<AppRootState, string | null>(state => state.app.error)\n   const dispatch = useDispatch();\n\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => { \n\n       if (reason === 'clickaway') { \n           return \n       } \n       dispatch(setAppErrorAC(null));\n   } \n\n \n\n   return ( \n\n       <Snackbar open={error != null} autoHideDuration={6000} onClose={handleClose}> \n\n           <Alert onClose={handleClose} severity=\"error\"> \n\n               {error}\n\n           </Alert> \n\n       </Snackbar> \n\n   ) \n\n} ","import React, {useCallback, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { AddItemForm } from './Components/AddItemForm/AddItemForm';\nimport { EditableSpan } from './Components/EditableSpan/EditableSpan';\nimport { AppBar, Button, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\nimport { Menu } from '@material-ui/icons';\nimport { changeTodolistTitleAC, cnangeTodoListEntityStatus, createTodolistThunkCreator, deleteTodolistThunkCreator, fetchTodolistsThunkCreator, removeTodolistAC, setTodoListsAC, TodolistDomainType, todolistsReducer } from './Store/todolists-reducer';\n// import { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer } from './Store/tasks-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\nimport { TaskType, todolistAPI } from './api/todolist-api';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { RequestStatusType } from './Store/app-reducer';\nimport { ErrorSnackbar } from './Components/ErrorSnackbar/errorSnackbar';\n\nexport type FilterValueType = 'all' | 'completed' | 'active';\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n  console.log('App Called');\n  \n\n  const dispatch = useDispatch();\n  const todoLists = useSelector<AppRootState, Array<TodolistDomainType>>( state => state.todolist)\n  const status = useSelector<AppRootState, RequestStatusType>( state => state.app.status)\n  \n\n  // UseEffect Side effect\n  useEffect(() => {\n    //using thunk\n    dispatch(fetchTodolistsThunkCreator());\n  }, [])\n\n\n  // Change title with useCallback\n  const changeTodoListTitle = useCallback((todoListId: string, newTitle: string) => {\n    dispatch(changeTodolistTitleAC(todoListId, newTitle))\n  }, [dispatch])\n\n  //remove todolist with useCallback\n  const removeTodoList = useCallback((todoListId: string) => {\n    \n    dispatch(deleteTodolistThunkCreator(todoListId))\n\n  }, [dispatch])\n\n\n  // Add to Do list callBack function with useCallback\n  const addToDolist = useCallback((title: string) => {\n    //dispatch(addTodolistAC(title))\n    dispatch(createTodolistThunkCreator(title))\n  }, [dispatch]);\n\n\n  const todoListsComponents = todoLists.map( (td) => {\n\n    return (\n          <Grid item key={td.id}>\n              <Paper elevation={5} style={{padding: '20px'}}>\n                <Todolist\n                    todolistId={td.id}\n                    title={td.title}\n                    filter={td.filter}            \n                    removeTodoList={removeTodoList}\n                    changeTodoListTitle={changeTodoListTitle}\n                    entityStatus={td.entityStatus}\n                />\n          </Paper>\n          </Grid>\n    )\n  })\n\n   return ( \n   <div className=\"App\">\n     \n       <AppBar position={'static'}>\n               <Toolbar style={{justifyContent: 'space-between'}}>\n                   <IconButton color={'inherit'}>\n                       <Menu />\n                   </IconButton>\n                   <Typography variant={'h6'}>\n                     TodoLists\n                   </Typography> \n                   <Button variant={'outlined'} \n                             color={'inherit'}>\n                     Login\n                   </Button>  \n       \n       \n               \n               </Toolbar>\n       \n       {/* Preloader */}\n       {status === 'loading' && <LinearProgress />}\n       {/* Preloader */}\n       </AppBar> \n  \n       \n\n\n           <Grid container style={{padding: '20px'}}>\n              \n              <AddItemForm addItem={addToDolist} disable={false}/>\n           </Grid>\n           <Grid container spacing={3} style={{padding: '20px'}}>\n              {todoListsComponents}\n           </Grid>\n\n           \n        {/* Erorr Snackbar */}\n        <ErrorSnackbar />\n        {/* Erorr Snackbar */}\n        \n  </ div> )\n           \n}\nexport default AppWithRedux;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { appReducer } from \"./app-reducer\";\nimport { tasksReducer } from \"./tasks-reducer\";\nimport { todolistsReducer } from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers({\n    todolist: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer\n});\n\n\n// Same as what above, but more practical\nexport type AppRootState = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport AppWithRedux from './AppWithRedux';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <AppWithReducers /> */}\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>\n    \n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemForm\":\"AddItemForm_itemForm__iA_oL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskInput\":\"Todolist_taskInput__ogLY3\",\"todolistContainer\":\"Todolist_todolistContainer__QkoOX\",\"title\":\"Todolist_title__12xE2\",\"titleDiv\":\"Todolist_titleDiv__11vVs\",\"addTaskButton\":\"Todolist_addTaskButton__lCCS0\",\"ListDeleteButton\":\"Todolist_ListDeleteButton__3rRVP\",\"buttonRemoveTask\":\"Todolist_buttonRemoveTask__3WgM_\",\"error\":\"Todolist_error__2ag5_\",\"errorMessage\":\"Todolist_errorMessage__2cD4t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskLine\":\"Task_taskLine__MG8R8\"};"],"sourceRoot":""}