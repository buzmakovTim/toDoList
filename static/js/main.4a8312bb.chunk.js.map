{"version":3,"sources":["reportWebVitals.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","api/todolist-api.tsx","Store/tasks-reducer.ts","Store/todolists-reducer.ts","Components/Task/Task.tsx","Todolist.tsx","AppWithRedux.tsx","Store/store.tsx","index.tsx","Components/AddItemForm/AddItemForm.module.css","Todolist.module.css","Components/Task/Task.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTaskOnClick","trim","addItem","className","style","itemForm","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","onBlur","IconButton","onClick","width","color","AddBox","marginLeft","EditableSpan","editMode","setEditMode","setTile","onChangeTitle","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","post","todoId","taskId","delete","initialState","addTaskAC","todolistId","type","changeTodolistTitleAC","id","changeTodolistFilterAC","filter","createTodolistThunkCreator","dispatch","res","data","resultCode","v1","addTodolistAC","Task","useDispatch","onChangeTaskTitleHandler","useCallback","newValue","task","isDone","taskLine","Checkbox","checked","removeTaskAC","Delete","Todolist","tasks","useSelector","state","useEffect","fetchTasksAC","items","showAll","showActive","showCompleted","removeTodoList","changeTodoListTileHandler","addTask","createTaskThunkCreator","tasksForTodoList","t","c","titleDiv","map","Button","margin","AppWithRedux","todoLists","todolist","getState","todolists","changeTodoListTitle","todoListId","newTitle","action","addToDolist","todoListsComponents","td","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","container","spacing","rootReducer","combineReducers","tl","todolistToUpdate","find","stateCopy","forEach","filteredTasks","newTask","newTasks","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4a8312bb.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\nimport { Button, IconButton, TextField } from '@material-ui/core';\nimport c from '../../Todolist.module.css';\nimport { AddBox } from '@material-ui/icons';\nimport { useDispatch } from 'react-redux';\nimport { addTaskAC } from '../../Store/tasks-reducer';\nimport { v1 } from 'uuid';\nimport style from './AddItemForm.module.css'\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void;\n}\n\nexport const AddItemForm = React.memo((props: AddItemPropsType) => {\n\n    console.log('AddItemForm has called')\n    let [title, setTitle] = useState<string>('');\n    let [error, setError] = useState<boolean>(false);\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)  \n    }\n\n    const addTaskOnClick = () => {\n\n        if(title.trim() !== \"\" ) {\n          props.addItem(title.trim());\n          setTitle('');\n        } else {\n          setError(true);\n        }\n        \n      };\n    \n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\n    if(error !== false){\n        setError(false);\n    }\n    if (e.key === 'Enter') addTaskOnClick();\n    };\n\n    return(\n        <div className={style.itemForm}>\n            {/* <input\n            className={`${c.taskInput} ${error ? c.error: \"\"}`}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            /> */}\n          <TextField\n            size={'small'}\n            variant={'outlined'}\n            error={error}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            label={\"Title\"}\n            helperText={error && 'Title is required!'}\n            onBlur={ () => setError(false)}\n          />\n        {/* <button className={c.addTaskButton} onClick={addTaskOnClick}>\n          +\n        </button> */}\n        <IconButton onClick={addTaskOnClick} style={{width: '5px'}} color={'primary'}>\n          <AddBox \n            style={{marginLeft: '25px'}}\n          />\n        </IconButton>\n\n            {/* {error && <div className={c.errorMessage}>Title is required!</div>} */}\n      </div>\n    )\n})","import React, { ChangeEvent, useState, useCallback } from 'react';\n\n\n\ntype EditableSpanPropsType = {\n    title: string\n    onChangeTitle: (newValue: string) => void;\n  }\n  \nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  \n    console.log('Editable Span')\n    \n    let [editMode, setEditMode] = useState(false)\n    let [title, setTile] = useState('')\n\n    let activateEditMode = () => {\n        setTile(props.title)\n        setEditMode(true)\n    }\n\n    let deactivateEditMode = () => {\n        setEditMode(false)\n        props.onChangeTitle(title)\n    }\n    const onChangeTitleHandler = (e : ChangeEvent<HTMLInputElement>) => setTile(e.currentTarget.value);\n\n      return (    \n        editMode ?\n        <input value={title} onChange={onChangeTitleHandler} onBlur={deactivateEditMode} autoFocus></input> :\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\n      )\n  })","import axios from 'axios'\nimport React, {useCallback} from 'react'\nimport { DeleteTodolist } from '../Store/todolists-api.stories'\n\nconst instance = axios.create({\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n   withCredentials: true,\n    headers: {\n        'API-KEY': 'cb837fe2-1523-4fe4-be8e-89a2fb123dce'\n    } \n})\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'cb837fe2-1523-4fe4-be8e-89a2fb123dce'\n    }\n}\n\n\ntype CommonResponseType<T = {}> = {\n    resultCode: number\n    fieldsErrors: string[]\n    messages: string\n    data: T\n}\n\n//type\n// type TodoType = {\n//     id: string\n//     title: string\n//     addedDate: string\n//     order: number\n// }\n\n// export const todolistAPI = {\n\n//     getTodos() {\n//         return instance.get<TodoType[]>('todo-lists')\n//     },\n\n//     createTodo(title: string) {\n//         return instance.post<CommonResponseType<{item: TodoType}>>('todo-lists', {title})\n//     },\n\n//     deleteTodo(todoId: string) {\n//         return instance.delete<CommonResponseType>(`todo-lists/${todoId}`)\n//     },\n\n//     updateTodoTitle(todoId: string, title: string){\n//         return instance.put<CommonResponseType>(`todo-lists/${todoId}`, {title})\n//     }\n// }\n\n// Without types\n\nexport const todolistAPI = {\n\n    getTodos() {\n        return instance.get('todo-lists')\n    },\n\n    createTodo(title: string) {\n        return instance.post('todo-lists', {title})\n    },\n\n    deleteTodo(todoId: string) {\n        return instance.delete(`todo-lists/${todoId}`)\n    },\n\n    updateTodoTitle(todoId: string, title: string){\n        return instance.put(`todo-lists/${todoId}`, {title})\n    },\n\n    getTasks(todoId: string){\n        return instance.get(`todo-lists/${todoId}/tasks`)\n    },\n\n    deleteTask(todoId: string, taskId: string){\n        return instance.delete(`todo-lists/${todoId}/tasks/${taskId}`)\n    },\n\n    createTask(todoId: string, title: string) {\n        return instance.post(`todo-lists/${todoId}/tasks`, {title})\n    }\n\n\n}\n\n","import { FilterValueType, TasksStateType } from '../AppWithRedux';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport  { Dispatch } from 'redux'\nimport { TodoListType } from '../AppWithRedux';\nimport { AccessTimeOutlined } from '@material-ui/icons';\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodoListActionType, } from './todolists-reducer';\nimport { todolistAPI } from '../api/todolist-api';\nimport { TaskType } from '../Todolist';\n\n\n//Action type\ntype ActionsType = |\n                    ReturnType<typeof removeTaskAC> | \n                    ReturnType<typeof addTaskAC> | \n                    ReturnType<typeof  changeTaskStatusAC> | \n                    ReturnType<typeof changeTaskTitleAC> | \n                    AddTodolistActionType | \n                    RemoveTodolistActionType | \n                    SetTodoListActionType |\n                    ReturnType<typeof fetchTasksAC>\n\n\n// Initial state\nconst initialState: TasksStateType = {\n    // [todoListId_1] : [{ id: v1(), title: 'CSS', isDone: true },\n    //   { id: v1(), title: 'JS', isDone: true },\n    //   { id: v1(), title: 'React', isDone: false },\n    //   { id: v1(), title: 'HTML', isDone: false },],\n    // [todoListId_2] : [{ id: v1(), title: 'CSS', isDone: true },\n    //   { id: v1(), title: 'Book', isDone: true },\n    //   { id: v1(), title: 'Beer', isDone: false },\n    //   { id: v1(), title: 'Milk', isDone: false },],\n  }                \n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n\n    switch(action.type){\n\n        \n        case 'SET-TODOLISTS':{\n            const stateCopy = {...state}\n            action.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            }) \n            \n            return stateCopy;\n        }\n        \n        case 'SET-TUSKS': {\n            const stateCopy = {...state}\n            stateCopy[action.todoId] = action.tasks\n            return stateCopy\n        }\n\n        case 'REMOVE-TASK' : {\n            \n            const stateCopy = {...state}\n            const tasks = state[action.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = filteredTasks\n \n            return stateCopy;\n        }\n        case 'ADD-TASK' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            const newTask = {id: v1(), title: action.title, isDone: false}\n            const newTasks = [newTask, ...tasks];\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            \n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\n            \n            return stateCopy;\n        }\n        case 'CHANGE-TASK-TITLE' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n\n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, title: action.title} : t)\n            return stateCopy;\n        }\n        case 'ADD-TODOLIST' : {\n            const stateCopy = {...state}\n\n            stateCopy[action.todolistId] = []\n\n            return stateCopy\n        } \n        case \"REMOVE-TODOLIST\" : {\n            const stateCopy = {...state}\n            delete stateCopy[action.id]  // delete property\n            return stateCopy\n        } \n        \n        default: \n            return state;\n\n    }\n    \n}\n\n// Action Creators\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n    return {type: \"REMOVE-TASK\", todolistId, taskId} as const\n}\nexport const addTaskAC = (title: string, todolistId: string) => {\n    return {type: \"ADD-TASK\", title, todolistId} as const\n}\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\n    return {type: \"CHANGE-TASK-STATUS\", taskId, isDone, todolistId} as const\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {type: \"CHANGE-TASK-TITLE\", taskId, title, todolistId} as const\n}\n\nexport const fetchTasksAC = (todoId: string, tasks: Array<TaskType>) => {\n    return {type: 'SET-TUSKS', todoId, tasks} as const\n}\n\n//\n//Thunk creator\n//\nexport const fetchTasksThunkCreator = (todoId: string) => {\n\n    return (dispatch: Dispatch) => {\n\n        todolistAPI.getTasks(todoId)\n            .then((res)=> {\n                dispatch(fetchTasksAC(todoId, res.data.items))\n            }) \n    }\n}\n\nexport const deleteTaskThunkCreator = (todoId: string, taskId: string) => {\n    return (dispatch: Dispatch) => {\n\n        todolistAPI.deleteTask(todoId, taskId)\n            .then( (res) => {\n                \n                if (res.data.resultCode === 0){\n                    dispatch(removeTaskAC(taskId, todoId))\n                }\n            })\n    }\n}\n\nexport const createTaskThunkCreator = (todoId: string, title: string) => {\n    return (dispatch: Dispatch) => {\n\n        todolistAPI.createTask(todoId, title)\n            .then( (res) => {\n                \n                if (res.data.resultCode === 0){\n                    dispatch(addTaskAC(title, todoId))\n                }\n            })\n    }\n}","import { FilterValueType } from './../AppWithRedux';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport  { Dispatch } from 'redux'\nimport { TodoListType } from '../AppWithRedux';\nimport { AppRootState } from './store';\nimport { todolistAPI } from '../api/todolist-api';\n\n// Old way for types\n\n// export type RemoveTodolistActionType = {\n//     type: \"REMOVE-TODOLIST\"\n//     id: string\n// }\n// export type AddTodolistActionType = {\n//     type: \"ADD-TODOLIST\"\n//     title: string\n//     todolistId: string\n// }\n// type ChangeTodolistTitleActionType = {\n//     type: \"CHANGE-TODOLIST-TITLE\"\n//     id: string\n//     title: string\n// }\n// type ChangeTodolistFilterActionType = {\n//     type: \"CHANGE-TODOLIST-FILTER\",\n//     id: string\n//     filter: FilterValueType\n// }\n\n// Types for export\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodoListActionType = ReturnType<typeof setTodoListsAC>\n\n// Action type\ntype ActionsType =  |\n                    RemoveTodolistActionType | \n                    AddTodolistActionType | \n                    ReturnType<typeof changeTodolistTitleAC> | \n                    ReturnType<typeof changeTodolistFilterAC> |\n                    SetTodoListActionType\n\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodolistDomainType = TodoListType & {\n    filter: FilterValuesType;\n}\n// Initial state empty array\nconst initialState: Array<TodoListType> = []\n\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType):Array<TodolistDomainType> => {\n\n    switch(action.type){\n\n        case 'SET-TODOLISTS': {\n            \n            return action.todolists.map( (tl) => {\n                return {...tl, filter: 'all'}\n            }) \n            \n        }\n\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id != action.id)\n        }\n\n        case 'ADD-TODOLIST': {\n            return [{\n                id: action.todolistId,\n                title: action.title,\n                filter: 'all'\n            }, ...state]\n        }\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.title = action.title;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-TODOLIST-FILTER': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.filter = action.filter;\n            }\n            return [...state]\n        }\n            \n        default: \n            return state;\n\n    }\n    \n}\n\n\n// Action Creators\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {type: \"REMOVE-TODOLIST\", id: todolistId} as const\n}\nexport const addTodolistAC = (title: string) => {\n    return {type: \"ADD-TODOLIST\", title: title, todolistId: v1()} as const\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: todolistId, title: title} as const\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValueType) => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter} as const\n}\nexport const setTodoListsAC = (todolists: Array<TodoListType>) => {\n    return {type: \"SET-TODOLISTS\", todolists} as const\n}\n\n//\n//thunk creators\n//\nexport const fetchTodolistsThunkCreator = () => (dispatch: Dispatch, getState: () => AppRootState) => {\n\n    // 1 server requests\n    todolistAPI.getTodos()\n      .then( (res) => {\n         \n        // 2 dispatch actions\n        dispatch(setTodoListsAC(res.data))\n      } ) \n}\nexport const createTodolistThunkCreator = (title: string) => (dispatch: Dispatch) => {\n\n    todolistAPI.createTodo(title)\n        .then( (res) => {\n            // debugger\n            if (res.data.resultCode === 0){\n                dispatch(addTodolistAC(title))\n            }\n        })\n}\n\n\n","import React, {useCallback} from 'react'\nimport { useDispatch } from 'react-redux';\nimport { changeTaskStatusAC, changeTaskTitleAC, deleteTaskThunkCreator, removeTaskAC } from '../../Store/tasks-reducer';\nimport { TaskType } from '../../Todolist';\nimport { EditableSpan } from '../EditableSpan/EditableSpan';\nimport { Delete } from '@material-ui/icons';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport style from './Task.module.css';\n\ntype TaskPropsType = {\n    todolistId: string,\n    task: TaskType\n  \n  } \n  \nexport const Task = React.memo((props: TaskPropsType) => {\n\n      \n      const dispatch = useDispatch();  \n  \n      const onChangeTaskTitleHandler = useCallback((newValue: string) => {\n      dispatch(changeTaskTitleAC(props.task.id, newValue, props.todolistId))\n      }, [])\n  \n  return <div key={props.task.id} className={props.task.isDone ? \"isDone\" : \"\"}>\n    <div className={style.taskLine}>\n      <div>\n  \n        <Checkbox \n            color={'primary'}\n            checked={props.task.isDone} \n            // onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}}\n            onChange={ () => {dispatch(changeTaskStatusAC(props.task.id, !props.task.isDone, props.todolistId))}}\n            />\n        {/* <input onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}} type=\"checkbox\" checked={t.isDone} /> */}\n        \n        {/* <span>{t.title}</span> */}\n        <EditableSpan title={props.task.title} onChangeTitle={onChangeTaskTitleHandler}/>\n      \n      {/* Remove task Button */}\n  \n      </div>\n      {/* <div className={c.buttonRemoveTask}> */}\n      <div>\n        {/* <button\n          onClick={() => {\n            props.removeTask(t.id, props.id);\n          }}\n        >\n          X\n        </button> */}\n        <IconButton onClick={() => {\n            // props.removeTask(t.id, props.id);\n            //dispatch(removeTaskAC(props.task.id, props.todolistId))\n            dispatch(deleteTaskThunkCreator(props.todolistId, props.task.id))\n\n          }}>\n          <Delete/>\n        </IconButton>\n      </div>\n    </div>\n  </div>\n  })","import React, { useCallback, useEffect } from 'react';\nimport { preProcessFile, StringMappingType } from 'typescript';\nimport { v1 } from 'uuid';\nimport { FilterValueType,  TasksStateType} from './AppWithRedux';\nimport { AddItemForm } from './Components/AddItemForm/AddItemForm';\nimport c from './Todolist.module.css';\nimport {EditableSpan} from './Components/EditableSpan/EditableSpan';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, createTaskThunkCreator, fetchTasksThunkCreator, removeTaskAC } from './Store/tasks-reducer';\nimport { changeTodolistFilterAC, changeTodolistTitleAC } from './Store/todolists-reducer';\nimport { Task } from './Components/Task/Task';\n\nexport type TaskType = {\n  id: string;\n  title: string;\n  isDone: boolean;\n};\n\ntype PropsTypeTodolist = {\n  todolistId: string; \n  title: string;\n  filter: FilterValueType;\n  changeTodoListTitle: (newTitle: string, todoListId: string) => void;\n  removeTodoList: (id: string) => void;\n};\n\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\n\n  console.log('ToDolist Called')\n  const tasks = useSelector<AppRootState, Array<TaskType>>( state => state.tasks[props.todolistId])\n  const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    dispatch(fetchTasksThunkCreator(props.todolistId))\n  }, [])\n\n\n  // Filter functions\n  const showAll = useCallback(() => {\n    //props.changeFilter(props.id, 'all');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'all'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n  \n  const showActive = useCallback(() => {\n    //props.changeFilter(props.id, 'active');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'active'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n  \n  const showCompleted = useCallback(() => {\n    //props.changeFilter(props.id, 'completed');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'completed'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n\n  const removeTodoList = useCallback(() => {\n    props.removeTodoList(props.todolistId);\n  },[props.removeTodoList, props.todolistId]);\n\n  const changeTodoListTileHandler = useCallback((newValue: string) => {\n    //props.changeTodoListTitle(props.id, newValue)\n    dispatch(changeTodolistTitleAC(props.todolistId, newValue))\n  }, [changeTodolistTitleAC, props.todolistId]);\n\n  const addTask = useCallback((title: string) => {\n    \n    //dispatch(addTaskAC(title, props.todolistId))\n    dispatch(createTaskThunkCreator(props.todolistId, title))\n  },[props.todolistId, addTaskAC])\n\n\n    // We gonna show task only depends what filter selected\n    let tasksForTodoList = tasks;\n    if (props.filter === 'completed') {\n      tasksForTodoList = tasks.filter((t) => t.isDone === true);\n    }\n    if (props.filter === 'active') {\n      tasksForTodoList = tasks.filter((t) => t.isDone === false);\n    }\n\n\n  return (\n    \n      <div>\n      \n      <div className={c.titleDiv}>\n        <EditableSpan title={props.title} onChangeTitle={changeTodoListTileHandler}/>\n        <IconButton onClick={removeTodoList}>\n                  <Delete/>\n      </IconButton>\n        {/* <h3 className={c.title}>{props.title}</h3> */}\n      </div>\n      \n\n      <AddItemForm addItem={addTask}/> \n      {/* addItem={props.addTask} todoListId={props.id}/> */}\n\n      <div>\n        {\n            tasksForTodoList.map( t => <Task \n                                          task={t} \n                                          todolistId={props.todolistId} \n                                          key={t.id}\n                                        />)\n        }\n      </div>\n\n      <div>\n        {/* Without material-ui using CSS only */}\n        {/* <button className={props.filter === \"all\" ? \"activeFilter\" : \"\"} onClick={showAll}>All</button>\n        <button className={props.filter === \"active\" ? \"activeFilter\" : \"\"} onClick={showActive}>Active</button>\n        <button className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} onClick={showCompleted}>Completed</button> */}\n\n        {/* Using material-ui */}\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            variant={props.filter === \"all\" ? \"contained\" : 'outlined'}\n            color={'primary'}\n            //className={props.filter === \"all\" ? \"activeFilter\" : \"\"} \n            onClick={showAll}>All</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            color={'primary'}\n            variant={props.filter === \"active\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"active\" ? \"activeFilter\" : \"\"} \n            onClick={showActive}>Active</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px', width: '100px'}}\n            color={'primary'}\n            variant={props.filter === \"completed\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} \n            onClick={showCompleted}>Completed</Button>\n      </div>\n    </div>\n  );\n})\n\n\n","import React, {useCallback, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TaskType, Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { AddItemForm } from './Components/AddItemForm/AddItemForm';\nimport { EditableSpan } from './Components/EditableSpan/EditableSpan';\nimport { AppBar, Button, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\nimport { Menu } from '@material-ui/icons';\nimport { addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, createTodolistThunkCreator, fetchTodolistsThunkCreator, removeTodolistAC, setTodoListsAC, todolistsReducer } from './Store/todolists-reducer';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer } from './Store/tasks-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\nimport { todolistAPI } from './api/todolist-api';\n\nexport type FilterValueType = 'all' | 'completed' | 'active';\n\nexport type TodoListType = {\n  id: string;\n  title: string;\n  filter: FilterValueType;\n}\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n  console.log('App Called');\n  \n\n  const dispatch = useDispatch();\n  const todoLists = useSelector<AppRootState, Array<TodoListType>>( state => state.todolist)\n  \n\n  // UseEffect Side effect\n  useEffect(() => {\n    //using thunk\n    dispatch(fetchTodolistsThunkCreator());\n  }, [])\n\n\n  // Change title with useCallback\n  const changeTodoListTitle = useCallback((todoListId: string, newTitle: string) => {\n    dispatch(changeTodolistTitleAC(todoListId, newTitle))\n  }, [dispatch])\n\n  //remove todolist with useCallback\n  const removeTodoList = useCallback((todoListId: string) => {\n    \n    const action = removeTodolistAC(todoListId)\n    dispatch(action)\n  }, [dispatch])\n\n\n  // Add to Do list callBack function with useCallback\n  const addToDolist = useCallback((title: string) => {\n    //dispatch(addTodolistAC(title))\n    dispatch(createTodolistThunkCreator(title))\n  }, [dispatch]);\n\n\n  const todoListsComponents = todoLists.map( (td) => {\n\n    return (\n          <Grid item key={td.id}>\n              <Paper elevation={5} style={{padding: '20px'}}>\n                <Todolist\n                    todolistId={td.id}\n                    title={td.title}\n                    filter={td.filter}            \n                    removeTodoList={removeTodoList}\n                    changeTodoListTitle={changeTodoListTitle}\n                />\n          </Paper>\n          </Grid>\n    )\n  })\n\n   return ( \n   <div className=\"App\">\n     \n       <AppBar position={'static'}>\n               <Toolbar style={{justifyContent: 'space-between'}}>\n                   <IconButton color={'inherit'}>\n                       <Menu />\n                   </IconButton>\n                   <Typography variant={'h6'}>\n                     TodoLists\n                   </Typography> \n                   <Button variant={'outlined'} \n                             color={'inherit'}>\n                     Login\n                   </Button>  \n               </Toolbar>\n       </AppBar> \n\n       {/* <div className=\"Title\"> */}\n         {/* <h3>Add NEW ToDoList</h3> */}\n\n         {/* <EditableSpan title={\"Add NEW ToDoList\"}/>  */}\n\n           <Grid container style={{padding: '20px'}}>\n              \n              <AddItemForm addItem={addToDolist} />\n           </Grid>\n           <Grid container spacing={3} style={{padding: '20px'}}>\n              {todoListsComponents}\n           </Grid>\n\n           \n       {/* </div> */}\n       {/* <div className=\"ToDoLists\"> */}\n  </ div> )\n           {/* {todoLists.map( (td) => {\n\n//             let tasksForTodoList = tasksObj[td.id];\n//             if (td.filter === 'completed') {\n//               tasksForTodoList = tasksForTodoList.filter((t) => t.isDone === true);\n//             }\n//             if (td.filter === 'active') {\n//               tasksForTodoList = tasksForTodoList.filter((t) => t.isDone === false);\n//             } */}\n          \n//                   return ( <div> \n                     \n//                   <Grid container>\n//                     <Todolist\n//                         key={td.id}\n//                         id={td.id}\n//                         title={td.title}\n//                         filter={td.filter}            \n//                         tasks={tasksForTodoList}\n//                         removeTask={removeTask}\n//                         addTask={addTask}\n//                         changeFilter={changeFilter}\n//                         changeStatus={changeStatus}\n//                         removeTodoList={removeTodoList}\n//                         changeTitle={changeTitle}\n//                         changeTodoListTitle={changeTodoListTitle}\n//                       />    \n//                   </Grid>    \n//                 </div>)\n//             } ) \n//           }\n//       </div>\n\n\n//     </div>\n//   )\n}\nexport default AppWithRedux;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { tasksReducer } from \"./tasks-reducer\";\nimport { todolistsReducer } from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers({\n    todolist: todolistsReducer,\n    tasks: tasksReducer\n});\n\n// type AppRootState = {\n//     todolist: Array<TodoListType>\n//     tasks: TasksStateType\n// }\n\n// Same as what above, but more practical\nexport type AppRootState = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport AppWithRedux from './AppWithRedux';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <AppWithReducers /> */}\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>\n    \n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemForm\":\"AddItemForm_itemForm__iA_oL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskInput\":\"Todolist_taskInput__ogLY3\",\"todolistContainer\":\"Todolist_todolistContainer__QkoOX\",\"title\":\"Todolist_title__12xE2\",\"titleDiv\":\"Todolist_titleDiv__11vVs\",\"addTaskButton\":\"Todolist_addTaskButton__lCCS0\",\"ListDeleteButton\":\"Todolist_ListDeleteButton__3rRVP\",\"buttonRemoveTask\":\"Todolist_buttonRemoveTask__3WgM_\",\"error\":\"Todolist_error__2ag5_\",\"errorMessage\":\"Todolist_errorMessage__2cD4t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskLine\":\"Task_taskLine__MG8R8\"};"],"sourceRoot":""}