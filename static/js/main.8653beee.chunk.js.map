{"version":3,"sources":["api/todolist-api.tsx","reportWebVitals.ts","Store/todolists-reducer.ts","utils/error-utils.ts","Store/auth-reducer.ts","Store/app-reducer.ts","Components/ErrorSnackbar/errorSnackbar.tsx","Store/tasks-reducer.ts","Components/Login/Login.tsx","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Components/Task/Task.tsx","Components/Todolist/Todolist.tsx","Components/Todolist/TodolistsList.tsx","App.tsx","Store/store.tsx","index.tsx","Components/AddItemForm/AddItemForm.module.css","Components/Todolist/Todolist.module.css","Components/Task/Task.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","ResponseStatuses","todolistAPI","get","title","post","todoId","delete","put","todolistId","taskId","model","authAPI","data","handleServerNetworkError","dispatch","message","setAppErrorAC","handleServerAppError","messages","length","errorMessage","setAppStatusAC","initialState","changeTodolistTitleAC","type","id","changeTodolistFilterAC","filter","isLoggedIn","setIsLoggedInAC","value","status","error","isInitialized","setIsInitialized","initializeAppTC","console","log","res","resultCode","success","catch","err","finally","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","Grid","container","justify","item","xs","FormControl","FormLabel","style","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","Button","color","AddItemForm","React","memo","useState","setTitle","setError","addTaskOnClick","trim","addItem","className","itemForm","disabled","disable","size","onChange","e","currentTarget","onKeyPress","key","helperText","onBlur","IconButton","onClick","width","AddBox","marginLeft","EditableSpan","editMode","setEditMode","setTile","onChangeTitle","autoFocus","onDoubleClick","createTaskThunkCreator","task","addTaskAC","Task","onChangeTaskTitleHandler","useCallback","newValue","getState","clickedTask","tasks","find","t","description","startDate","priority","deadline","changeTaskTitleAC","onChangeHandler","newIsDoneValue","checked","Completed","New","changeTaskStatusAC","taskLine","removeTaskAC","Delete","Todolist","useEffect","fetchTasksAC","items","showAll","showActive","showCompleted","removeTodoList","changeTodoListTileHandler","addTask","tasksForTodoList","c","titleDiv","entityStatus","map","TodolistsList","todoLists","todolist","todolists","changeTodoListTitle","todoListId","newTitle","addToDolist","todo","createTodolistThunkCreator","padding","spacing","td","Paper","App","logoutHadler","AppBar","position","Toolbar","justifyContent","Menu","Typography","LinearProgress","exact","path","render","from","CircularProgress","rootReducer","combineReducers","action","tl","todolistToUpdate","stateCopy","forEach","filteredTasks","newTasks","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"6JA0BYA,EAMAC,E,iCClBGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,uGDLRQ,E,OAAWC,EAAMC,OAAO,CAC3BC,QAAS,gDACTC,iBAAiB,EAChBC,QAAS,CACL,UAAW,2C,SAkBPhB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KAiEL,IEoCKgB,EFpCCC,EAAc,WAKnB,OADgBP,EAASQ,IAAoB,eAJxCD,EAAc,SAQZE,GAGP,OADgBT,EAASU,KAA2C,aAAc,CAACD,MAAOA,KAVrFF,EAAc,SAcZI,GAGP,OADgBX,EAASY,OAAT,qBAA4CD,KAhBvDJ,EAAc,SAoBPI,EAAgBF,GAG5B,OADgBT,EAASa,IAAT,qBAAyCF,GAAU,CAACF,MAAOA,KAtBtEF,EAAc,SA0BdO,GAEL,OAAOd,EAASQ,IAAT,qBAA6CM,EAA7C,YA5BFP,EAAc,SA+BZO,EAAoBC,GAE3B,OAAOf,EAASY,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjClER,EAAc,SAoCZO,EAAoBL,GAE3B,OAAOT,EAASU,KAAT,qBAA4DI,EAA5D,UAAgF,CAACL,WAtCnFF,EAAc,SAyCZO,EAAoBC,EAAgBC,GAE3C,OAAOhB,EAASa,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUC,IAWnFC,EAAU,SAEbC,GAEF,OADgBlB,EAASU,KAAqC,aAAcQ,IAHvED,EAAU,WAQf,OADgBjB,EAASQ,IAA8D,YAPlFS,EAAU,WAYf,OADgBjB,EAASY,OAAqB,eG7JzCO,EAA2B,SAACC,EAAsCC,GAE3ED,EAASE,EAAcD,KAKdE,EAAuB,SAAIH,EAAsCF,GAE1E,GAAGA,EAAKM,SAASC,OAAO,CAEpB,IAAMC,EAAeR,EAAKM,SAAS,GACnCJ,EAASE,EAAcI,SAGvBN,EAASE,EAAc,wBAE3BF,EAASO,EAAe,Y,QDkCtBC,EAA0C,GA8DnCC,EAAwB,SAACf,EAAoBL,GACtD,MAAO,CAACqB,KAAM,wBAAyBC,GAAIjB,EAAYL,MAAOA,IAErDuB,EAAyB,SAAClB,EAAoBmB,GACvD,MAAO,CAACH,KAAM,yBAA0BC,GAAIjB,EAAYmB,OAAQA,K,SAWxD3B,O,qBAAAA,I,iBAAAA,I,uBAAAA,M,KASL,IEnIDsB,EAAe,CAClBM,YAAY,GAoBFC,EAAkB,SAACC,GAAD,MAE3B,CAACN,KAAM,yBAA0BM,UCtB/BR,EAAe,CAElBS,OAAQ,OACRC,MAAO,KACPC,eAAe,GA8BLZ,EAAiB,SAACU,GAC3B,MAAO,CACHP,KAAM,iBACNO,WAIKf,EAAgB,SAACgB,GAC1B,MAAO,CACHR,KAAM,kBACNQ,UAGKE,EAAmB,SAACD,GAC7B,MAAO,CACHT,KAAM,qBACNS,kBAKKE,EAAkB,kBAAM,SAACrB,GAElCsB,QAAQC,IAAI,qBACZvB,EAASO,EAAe,YACxBV,IACKvB,MAAK,SAACkD,GAECA,EAAI1B,KAAK2B,aAAevC,EAAiBwC,SAEzC1B,EAASe,GAAgB,IACzBf,EAASoB,GAAiB,IAC1BpB,EAASO,EAAe,eAIxBP,EAASO,EAAe,cAI/BoB,OAAO,SAACC,GAEL7B,EAAyBC,EAAU4B,EAAI3B,YAE1C4B,SAAQ,WACL7B,EAASoB,GAAiB,S,yBClFtC,SAASU,EAAMC,GAEZ,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAKhD,SAASG,IAGb,IAAMhB,EAAQiB,aAAyC,SAAAC,GAAK,OAAIA,EAAMC,IAAInB,SACpElB,EAAWsC,cAEXC,EAAc,SAACC,EAA8BC,GAEhC,cAAXA,GAGJzC,EAASE,EAAc,QAK3B,OAEI,cAACwC,EAAA,EAAD,CAAUC,KAAe,MAATzB,EAAe0B,iBAAkB,IAAMC,QAASN,EAAhE,SAEI,cAAC,EAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SAEK5B,M,ICiGXhC,E,uFCrHQ6D,GAAQ,WAEjB,IAAM/C,EAAWsC,cACXxB,EAAaqB,aAAmC,SAAAC,GAAK,OAAIA,EAAMY,KAAKlC,cAEpEmC,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GAEP,IAAMC,EAA0B,GAehC,OAdKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAEhEK,EAAOL,MAAQ,yBAHfK,EAAOL,MAAQ,WAMfI,EAAOH,SAEAG,EAAOH,SAAShD,OAAS,IAEhCoD,EAAOJ,SAAW,qBAHlBI,EAAOJ,SAAW,WAMfI,GAEXE,SAAU,SAAAH,GJVK,IAAC1D,EIYZE,GJZYF,EIYK0D,EJZe,SAACxD,GAEzCA,EAASO,EAAe,YACxBV,EAAcC,GACTxB,MAAM,SAACkD,GACAA,EAAI1B,KAAK2B,aAAevC,EAAiBwC,SAGzC1B,EAASe,GAAgB,IACzBf,EAASO,EAAe,eAGxBJ,EAAqBH,EAAUwB,EAAI1B,SAG1C6B,OAAO,SAACC,GACL7B,EAAyBC,EAAU4B,EAAI3B,eIHvCgD,EAAOW,eAIf,OAAG9C,EACQ,cAAC,IAAD,CAAU+C,GAAI,MAGnB,cAACC,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SAEH,cAACF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACI,eAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,yDACE,mBAAGC,MAAO,CAAC,eAAkB,QAASC,KAAM,wCACzCC,OAAQ,SADX,sBAIF,wEACA,0DACA,kDAGJ,sBAAMZ,SAAUV,EAAOuB,aAAvB,SACS,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,aACIC,MAAM,QACNC,OAAO,UAKH3B,EAAO4B,cAAc,WAG5B5B,EAAO6B,QAAQ1B,OAASH,EAAOQ,OAAOL,OACvC,qBAAKiB,MAAO,CAAC,MAAS,OAAtB,SAA+BpB,EAAOQ,OAAOL,QAE7C,cAACsB,GAAA,EAAD,aACIhE,KAAK,WACLiE,MAAM,WACNC,OAAO,UAKH3B,EAAO4B,cAAc,cAG5B5B,EAAO6B,QAAQzB,UAAYJ,EAAOQ,OAAOJ,UAC1C,qBAAKgB,MAAO,CAAC,MAAS,OAAtB,SAA+BpB,EAAOQ,OAAOJ,WAE7C,cAAC0B,GAAA,EAAD,CACIJ,MAAO,cACPK,QAAS,cAACC,GAAA,EAAD,eAAehC,EAAO4B,cAAc,kBAGjD,cAACK,EAAA,EAAD,CAAQxE,KAAM,SAAUuB,QAAS,YAAakD,MAAO,UAArD,gC,iDC9FfC,GAAcC,IAAMC,MAAK,SAACvD,GAEnCT,QAAQC,IAAI,0BAFmD,MAGvCgE,mBAAiB,IAHsB,oBAG1DlG,EAH0D,KAGnDmG,EAHmD,OAIvCD,oBAAkB,GAJqB,oBAI1DrE,EAJ0D,KAInDuE,EAJmD,KAWzDC,EAAiB,WAEC,KAAjBrG,EAAMsG,QACP5D,EAAM6D,QAAQvG,EAAMsG,QACpBH,EAAS,KAETC,GAAS,IAYf,OACI,sBAAKI,UAAWxB,KAAMyB,SAAtB,UAQE,cAACpB,GAAA,EAAD,CACEqB,SAAUhE,EAAMiE,QAChBC,KAAM,QACNhE,QAAS,WACTf,MAAOA,EACPF,MAAO3B,EACP6G,SAAU,SAACC,GAAD,OAAOX,EAASW,EAAEC,cAAcpF,QAC1CqF,WAvBkB,SAACF,IACd,IAAVjF,GACCuE,GAAS,GAEC,UAAVU,EAAEG,KAAiBZ,KAoBff,MAAO,QACP4B,WAAYrF,GAAS,qBACrBsF,OAAS,kBAAMf,GAAS,MAK5B,cAACgB,EAAA,EAAD,CAAYV,SAAUhE,EAAMiE,QAChBU,QAAShB,EACTrB,MAAO,CAACsC,MAAO,OAAQxB,MAAO,UAF1C,SAGE,cAACyB,GAAA,EAAD,CACEvC,MAAO,CAACwC,WAAY,kB,oBC9DnBC,GAAezB,IAAMC,MAAK,SAACvD,GAEpCT,QAAQC,IAAI,iBAFyD,MAIvCgE,oBAAS,GAJ8B,oBAIhEwB,EAJgE,KAItDC,EAJsD,OAK9CzB,mBAAS,IALqC,oBAKhElG,EALgE,KAKzD4H,EALyD,KAkBnE,OACEF,EACA,uBAAO/F,MAAO3B,EAAO6G,SAJI,SAACC,GAAD,OAAuCc,EAAQd,EAAEC,cAAcpF,QAInCwF,OARhC,WACrBQ,GAAY,GACZjF,EAAMmF,cAAc7H,IAM6D8H,WAAS,IAC1F,sBAAMC,cAda,WACnBH,EAAQlF,EAAM1C,OACd2H,GAAY,IAYZ,SAAwCjF,EAAM1C,W,UHFhDmB,GAA+B,I,SA2GhCtB,O,qBAAAA,I,iBAAAA,I,uBAAAA,M,KAQE,IA4BMmI,GAAyB,SAAC9H,EAAgBF,GAAjB,OAAmC,SAACW,GAElEA,EAASO,EAAe,YAExBpB,EAAuBI,EAAQF,GAC1Bf,MAAM,SAACkD,GAEJ,GAAIA,EAAI1B,KAAK2B,aAAevC,EAAiBwC,QAAQ,CACjD,IAAM4F,EAAO9F,EAAI1B,KAAKA,KAAKmE,KAE3BjE,EA9DK,SAACsH,GACtB,MAAO,CAAC5G,KAAM,WAAY4G,QA6DDC,CAAUD,IACnBtH,EAASO,EAAe,mBAGrBiB,EAAI1B,KAAKM,SAASC,OACjBL,EAASE,EAAcsB,EAAI1B,KAAKM,SAAS,KAEzCJ,EAASE,EAAc,wBAE3BF,EAASO,EAAe,gB,oBIhL/BiH,GAAOnC,IAAMC,MAAK,SAACvD,GAG1B,IAAM/B,EAAWsC,cAEXmF,EAA2BC,uBAAY,SAACC,GJgNnB,IAACpI,EAAgBI,EAAgBN,EI9MxDW,GJ8MwBT,EI9MGwC,EAAMrC,WJ8MOC,EI9MKoC,EAAMuF,KAAK3G,GJ8MAtB,EI9MIsI,EJ8Mc,SAAC3H,EAAoB4H,GAEjG5H,EAASO,EAAe,YAExB,IAGMsH,EAHQD,IACSE,MACiBvI,GACGwI,MAAM,SAACC,GAC9C,OAAOA,EAAErH,KAAOhB,KAGpB,GAAGkI,EAAa,CAGZ,IAAMjI,EAA6B,CAC/BP,MAAOA,EACP4B,OAAQ4G,EAAY5G,OACpBgH,YAAaJ,EAAYI,YACzBC,UAAWL,EAAYK,UACvBC,SAAUN,EAAYM,SACtBC,SAAUP,EAAYO,UAG1BjJ,EAAuBI,EAAQI,EAAQC,GACtCtB,MAAM,SAACkD,GACJxB,EA/HiB,SAACL,EAAgBN,EAAeK,GAC7D,MAAO,CAACgB,KAAM,oBAAqBf,SAAQN,QAAOK,cA8H7B2I,CAAkB1I,EAAQN,EAAOE,IAC1CS,EAASO,EAAe,uBIvO/B,IAEG+H,EAAkBZ,uBAAY,SAACvB,GACnC,IJ0KqC5G,EAAgBI,EAAgBsB,EI1KjEsH,EAAiBpC,EAAEC,cAAcoC,QAErCxI,GJwKqCT,EIxKCwC,EAAMrC,WJwKSC,EIxKGoC,EAAMuF,KAAK3G,GJwKEM,EIxKEsH,EAAiBtK,EAAawK,UAAYxK,EAAayK,IJwKhC,SAAC1I,EAAoB4H,GAEnH5H,EAASO,EAAe,YAExB,IAGMsH,EAHQD,IACSE,MACiBvI,GACGwI,MAAM,SAACC,GAC9C,OAAOA,EAAErH,KAAOhB,KAKpB,GAAGkI,EAAa,CAEZ,IAAMjI,EAA6B,CAC/BP,MAAOwI,EAAYxI,MACnB4B,OAAQA,EACRgH,YAAaJ,EAAYI,YACzBC,UAAWL,EAAYK,UACvBC,SAAUN,EAAYM,SACtBC,SAAUP,EAAYO,UAG1BjJ,EAAuBI,EAAQI,EAAQC,GACtCtB,MAAM,SAACkD,GACJxB,EAnGkB,SAACL,EAAgBsB,EAAsBvB,GACrE,MAAO,CAACgB,KAAM,qBAAsBf,SAAQsB,SAAQvB,cAkG/BiJ,CAAmBhJ,EAAQsB,EAAQ1B,IAC5CS,EAASO,EAAe,oBIjMjC,CAACwB,EAAMuF,KAAK3G,GAAIoB,EAAMrC,aAG3B,OAAO,qBAAyBmG,UAAW9D,EAAMuF,KAAKrG,SAAWhD,EAAawK,UAAY,SAAW,GAA9F,SACL,sBAAK5C,UAAWxB,KAAMuE,SAAtB,UACE,gCAEE,cAAC3D,GAAA,EAAD,CACIE,MAAO,UACPqD,QAASzG,EAAMuF,KAAKrG,SAAWhD,EAAawK,UAE5CvC,SAAUoC,IAKd,cAACxB,GAAD,CAAczH,MAAO0C,EAAMuF,KAAKjI,MAAO6H,cAAeO,OAMxD,8BAQE,cAAChB,EAAA,EAAD,CAAYC,QAAS,WJkGS,IAACnH,EAAgBI,EIjG3CK,GJiG2BT,EIjGKwC,EAAMrC,WJiGKC,EIjGOoC,EAAMuF,KAAK3G,GJiGC,SAACX,GAEnEA,EAASO,EAAe,YAExBpB,EAAuBI,EAAQI,GAC1BrB,MAAM,SAACkD,GAEAA,EAAI1B,KAAK2B,aAAevC,EAAiBwC,UACzC1B,EAjDQ,SAACL,EAAgBD,GACzC,MAAO,CAACgB,KAAM,cAAehB,aAAYC,UAgDhBkJ,CAAalJ,EAAQJ,IAC9BS,EAASO,EAAe,sBI3GpC,SAGE,cAACuI,GAAA,EAAD,YA9BS/G,EAAMuF,KAAK3G,OCEjBoI,GAAW1D,IAAMC,MAAK,SAACvD,GAGlC,IAAM+F,EAAQ3F,aAA4C,SAAAC,GAAK,OAAIA,EAAM0F,MAAM/F,EAAMrC,eAC/EM,EAAWsC,cAGjB0G,qBAAU,WLsG0B,IAACzJ,EKpGnCS,GLoGmCT,EKpGHwC,EAAMrC,WLoGgB,SAACM,GAEnDsB,QAAQC,IAAI,yBAA2BhC,GACvCS,EAASO,EAAe,YAExBpB,EAAqBI,GAChBjB,MAAK,SAACkD,GAEHxB,EAtBY,SAACT,EAAgBuI,GACzC,MAAO,CAACpH,KAAM,YAAanB,SAAQuI,SAqBdmB,CAAa1J,EAAQiC,EAAI1B,KAAKoJ,QACvClJ,EAASO,EAAe,sBK5GnC,CAACP,IAIJ,IAAMmJ,EAAUzB,uBAAY,WAE1B1H,EAASY,EAAuBmB,EAAMrC,WAAY,UACjD,CAACkB,EAAwBmB,EAAMrC,aAE5B0J,EAAa1B,uBAAY,WAE7B1H,EAASY,EAAuBmB,EAAMrC,WAAY,aACjD,CAACkB,EAAwBmB,EAAMrC,aAE5B2J,EAAgB3B,uBAAY,WAEhC1H,EAASY,EAAuBmB,EAAMrC,WAAY,gBACjD,CAACkB,EAAwBmB,EAAMrC,aAE5B4J,EAAiB5B,uBAAY,WACjC3F,EAAMuH,eAAevH,EAAMrC,cAC3B,CAACqC,EAAMuH,eAAgBvH,EAAMrC,aAEzB6J,EAA4B7B,uBAAY,SAACC,GV2IN,IAACpI,EAAgBF,EUxIxDW,GVwIwCT,EUxIHwC,EAAMrC,WVwIaL,EUxIDsI,EVwImB,SAAC3H,GAE3EA,EAASO,EAAe,YAExBpB,EAA4BI,EAAQF,GAC/Bf,MAAM,SAACkD,GAEAA,EAAI1B,KAAK2B,aAAevC,EAAiBwC,SAEzC1B,EAASS,EAAsBlB,EAAQF,IACvCW,EAASO,EAAe,eAIxBJ,EAAqBH,EAAUwB,EAAI1B,SAG1C6B,OAAO,SAACC,GAEL7B,EAAyBC,EAAU4B,EAAI3B,iBUzJ9C,CAACQ,EAAuBsB,EAAMrC,aAE3B8J,EAAU9B,uBAAY,SAACrI,GAE3BW,EAASqH,GAAuBtF,EAAMrC,WAAYL,MAClD,CAAC0C,EAAMrC,WAAY2H,KAIfoC,EAAmB3B,EAUzB,MATuB,cAAjB/F,EAAMlB,SACR4I,EAAmB3B,EAAMjH,QAAO,SAACmH,GAAD,OAAOA,EAAE/G,SAAWhD,EAAawK,cAE9C,WAAjB1G,EAAMlB,SACR4I,EAAmB3B,EAAMjH,QAAO,SAACmH,GAAD,OAAOA,EAAE/G,SAAWhD,EAAayK,QAOjE,gCAEA,sBAAK7C,UAAW6D,KAAEC,SAAlB,UACE,cAAC7C,GAAD,CAAczH,MAAO0C,EAAM1C,MAAO6H,cAAeqC,IAGjD,cAAC9C,EAAA,EAAD,CAAYC,QAAS4C,EAAgBvD,SAAiC,YAAvBhE,EAAM6H,aAArD,SACU,cAACd,GAAA,EAAD,SAOZ,cAAC1D,GAAD,CAAaQ,QAAS4D,EAASxD,QAAgC,YAAvBjE,EAAM6H,eAG9C,8BAEMH,EAAiBI,KAAK,SAAA7B,GAAC,OAAI,cAACR,GAAD,CACGF,KAAMU,EACNtI,WAAYqC,EAAMrC,YACbsI,EAAErH,SAK3C,gCAOE,cAACuE,EAAA,EAAD,CACIe,KAAM,QACN5B,MAAO,CAACO,OAAQ,OAChB3C,QAA0B,QAAjBF,EAAMlB,OAAmB,YAAc,WAChDsE,MAAO,UAEPuB,QAASyC,EANb,iBAOA,cAACjE,EAAA,EAAD,CACIe,KAAM,QACN5B,MAAO,CAACO,OAAQ,OAChBO,MAAO,UACPlD,QAA0B,WAAjBF,EAAMlB,OAAsB,YAAc,WAEnD6F,QAAS0C,EANb,oBAOA,cAAClE,EAAA,EAAD,CACIe,KAAM,QACN5B,MAAO,CAACO,OAAQ,MAAO+B,MAAO,SAC9BxB,MAAO,UACPlD,QAA0B,cAAjBF,EAAMlB,OAAyB,YAAc,WAEtD6F,QAAS2C,EANb,gCCtBOS,OA/Ff,WAIE,IAAM9J,EAAWsC,cACXyH,EAAY5H,aAAsD,SAAAC,GAAK,OAAIA,EAAM4H,YAEjFlJ,EAAaqB,aAAmC,SAAAC,GAAK,OAAIA,EAAMY,KAAKlC,cAI1EkI,qBAAU,WAERhJ,EAASqB,KAMTrB,GXmG4C,SAACA,EAAoB4H,GAEjEtG,QAAQC,IAAI,kBAGZvB,EAASO,EAAe,YACxBpB,IACGb,MAAM,SAACkD,GAGNxB,EA3BG,CAACU,KAAM,gBAAiBuJ,UA2BHzI,EAAI1B,OAC5BE,EAASO,EAAe,iBAGzBoB,OAAO,SAACC,GAEP7B,EAAyBC,EAAU4B,EAAI3B,iBWlH1C,IAOH,IAAMiK,EAAsBxC,uBAAY,SAACyC,EAAoBC,GAC3DpK,EAASS,EAAsB0J,EAAYC,MAC1C,CAACpK,IAGEsJ,EAAiB5B,uBAAY,SAACyC,GX+HI,IAAC5K,EW7HvCS,GX6HuCT,EW7HH4K,EX6HsB,SAACnK,GAE3DA,EAASO,EAAe,YAExBP,EA3DO,CAACU,KAAM,uBAAyBhB,WA2DHH,EA3DeqK,aA2DP,YAC5CzK,EAAuBI,GAClBjB,MAAM,SAACkD,GACAA,EAAI1B,KAAK2B,aAAevC,EAAiBwC,SAEzC1B,EA/EL,CAACU,KAAM,kBAAmBC,GA+EKpB,IAC1BS,EAASO,EAAe,eAIxBJ,EAAqBH,EAAUwB,EAAI1B,SAG1C6B,OAAO,SAACC,GAEL7B,EAAyBC,EAAU4B,EAAI3B,iBW9I9C,CAACD,IAIEqK,EAAc3C,uBAAY,SAACrI,GAE/BW,EXgGsC,SAACX,GAAD,OAAmB,SAACW,GAE1DA,EAASO,EAAe,YACxBpB,EAAuBE,GAClBf,MAAM,SAACkD,GACJ,GAAIA,EAAI1B,KAAK2B,aAAevC,EAAiBwC,QAAQ,CAEjD,IAAM4I,EAAO9I,EAAI1B,KAAKA,KAAKmE,KAC3BjE,EAtDL,CAACU,KAAM,eAAgBsJ,SAsDKM,IACvBtK,EAASO,EAAe,mBAGxBJ,EAAqBH,EAAUwB,EAAI1B,SAG1C6B,OAAO,SAACC,GAEL7B,EAAyBC,EAAU4B,EAAI3B,aWjHtCsK,CAA2BlL,MACnC,CAACW,IAIJ,OAAIc,EAWI,qCAEA,cAACgD,GAAA,EAAD,CAAMC,WAAS,EAACM,MAAO,CAACmG,QAAS,QAAjC,SACI,cAACpF,GAAD,CAAaQ,QAASyE,EAAarE,SAAS,MAIhD,cAAClC,GAAA,EAAD,CAAMC,WAAS,EAAC0G,QAAS,EAAGpG,MAAO,CAACmG,QAAS,QAA7C,SAGIT,EAAUF,KAAK,SAACa,GAEhB,OAAO,cAAC5G,GAAA,EAAD,CAAMG,MAAI,EAAV,SACG,cAAC0G,GAAA,EAAD,CAAO3I,UAAW,EAAGqC,MAAO,CAACmG,QAAS,QAAtC,SACE,cAACzB,GAAD,CACIrJ,WAAYgL,EAAG/J,GACftB,MAAOqL,EAAGrL,MACVwB,OAAQ6J,EAAG7J,OACXyI,eAAgBA,EAChBY,oBAAqBA,EACrBN,aAAcc,EAAGd,kBARVc,EAAG/J,SAmBhC,cAACuB,EAAD,OAzCG,cAAC,IAAD,CAAU2B,GAAI,Y,UCkBV+G,OAnEf,WAGE,IAAM5K,EAAWsC,cACXrB,EAASkB,aAA8C,SAAAC,GAAK,OAAIA,EAAMC,IAAIpB,UAC1EH,EAAaqB,aAAmC,SAAAC,GAAK,OAAIA,EAAMY,KAAKlC,cACpEK,EAAgBgB,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,IAAIlB,iBAGtE0J,EAAenD,uBAAa,WAChC1H,GVyB0B,SAACA,GAE3BA,EAASO,EAAe,YACxBV,IACKvB,MAAM,SAACkD,GACAA,EAAI1B,KAAK2B,aAAevC,EAAiBwC,SAGzC1B,EAASe,GAAgB,IACzBf,EAASO,EAAe,eAGxBJ,EAAqBH,EAAUwB,EAAI1B,SAG1C6B,OAAO,SAACC,GACL7B,EAAyBC,EAAU4B,EAAI3B,iBUxC9C,CAACD,IAQJ,OALAgJ,qBAAU,WACRhJ,EAASqB,OACR,IAGCF,EAQH,sBAAK0E,UAAU,MAAf,UAEI,eAACiF,EAAA,EAAD,CAAQC,SAAU,SAAlB,UACQ,eAACC,EAAA,EAAD,CAAS3G,MAAO,CAAC4G,eAAgB,iBAAjC,UACI,cAACxE,EAAA,EAAD,CAAYtB,MAAO,UAAnB,SACI,cAAC+F,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYlJ,QAAS,KAArB,uBAICnB,GACD,cAACoE,EAAA,EAAD,CAAQjD,QAAS,WACPkD,MAAO,UACPuB,QAASmE,EAFnB,uBAOA,YAAX5J,GAAwB,cAACmK,EAAA,EAAD,OAKlB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAS,kBAAM,cAAC,GAAD,OACvC,cAAC,IAAD,CAAOD,KAAM,SAAUC,OAAS,kBAAM,cAAC,GAAD,OACtC,cAAC,IAAD,CAAOD,KAAM,OAAQC,OAAS,kBAAM,oBAAIlH,MAAO,CAAC,UAAa,SAAU,SAAY,QAA/C,oCAEpC,cAAC,IAAD,CAAUmH,KAAM,IAAK3H,GAAI,YAKjC,cAAC3B,EAAD,OAzCG,qBAAKmC,MAAO,CAAC,SAAY,QAAS,IAAO,MAAO,KAAQ,OAAxD,SACL,cAACoH,GAAA,EAAD,O,kBCrCAC,GAAcC,aAAgB,CAChC3B,SbmD4B,WAAqG,IAApG5H,EAAmG,uDAAhE5B,EAAcoL,EAAkD,uCAEhI,OAAOA,EAAOlL,MAEV,IAAK,gBAED,OAAOkL,EAAO3B,UAAUJ,KAAK,SAACgC,GAC1B,OAAO,2BAAIA,GAAX,IAAehL,OAAQ,MAAO+I,aAAc,YAIpD,IAAK,kBACD,OAAOxH,EAAMvB,QAAO,SAAAgL,GAAE,OAAIA,EAAGlL,IAAMiL,EAAOjL,MAG9C,IAAK,eAED,MAAM,CAAN,2BAAYiL,EAAO5B,UAAnB,IAA6BnJ,OAAQ,MAAO+I,aAAc,UAA1D,mBAAsExH,IAG1E,IAAK,wBAED,IAAM0J,EAAmB1J,EAAM2F,MAAM,SAAA8D,GAAE,OAAIA,EAAGlL,KAAOiL,EAAOjL,MAI5D,OAHGmL,IACCA,EAAiBzM,MAAQuM,EAAOvM,OAE7B,YAAI+C,GAGf,IAAK,yBAED,IAAM0J,EAAmB1J,EAAM2F,MAAM,SAAA8D,GAAE,OAAIA,EAAGlL,KAAOiL,EAAOjL,MAI5D,OAHGmL,IACCA,EAAiBjL,OAAS+K,EAAO/K,QAE9B,YAAIuB,GAGf,IAAK,uBACD,OAAOA,EAAMyH,KAAK,SAAAgC,GAAE,OAAIA,EAAGlL,KAAOiL,EAAOlM,WAAjB,2BAAkCmM,GAAlC,IAAsChL,OAAQ,MAAO+I,aAAcgC,EAAOhC,eAAgBiC,KAItH,QACI,OAAOzJ,Ia9Ff0F,MR8BwB,WAAgF,IAA/E1F,EAA8E,uDAAtD5B,GAAcoL,EAAwC,uCAEvG,OAAOA,EAAOlL,MAGV,IAAK,gBACD,IAAMqL,EAAS,eAAO3J,GAKtB,OAJAwJ,EAAO3B,UAAU+B,SAAQ,SAACH,GACtBE,EAAUF,EAAGlL,IAAM,MAGhBoL,EAGX,IAAK,YACD,IAAMA,EAAS,eAAO3J,GAEtB,OADA2J,EAAUH,EAAOrM,QAAUqM,EAAO9D,MAC3BiE,EAGX,IAAK,cAED,IAAMA,EAAS,eAAO3J,GAChB0F,EAAQ1F,EAAMwJ,EAAOlM,YACrBuM,EAAgBnE,EAAMjH,QAAO,SAAAmH,GAAC,OAAIA,EAAErH,KAAOiL,EAAOjM,UAGxD,OAFAoM,EAAUH,EAAOlM,YAAcuM,EAExBF,EAEX,IAAK,WAED,IAAMA,EAAS,eAAO3J,GAChB0F,EAAQiE,EAAUH,EAAOtE,KAAK6C,YAC9B+B,EAAQ,CAAIN,EAAOtE,MAAX,mBAAoBQ,IAGlC,OAFAiE,EAAUH,EAAOtE,KAAK6C,YAAc+B,EAE7BH,EAEX,IAAK,qBAED,IAAMA,EAAS,eAAO3J,GAChB0F,EAAQiE,EAAUH,EAAOlM,YAI/B,OAFAqM,EAAUH,EAAOlM,YAAcoI,EAAM+B,KAAK,SAAA7B,GAAC,OAAIA,EAAErH,KAAOiL,EAAOjM,OAAhB,2BAA6BqI,GAA7B,IAAgC/G,OAAQ2K,EAAO3K,SAAU+G,KAEjG+D,EAEX,IAAK,oBAED,IAAMA,EAAS,eAAO3J,GAChB0F,EAAQiE,EAAUH,EAAOlM,YAG/B,OADAqM,EAAUH,EAAOlM,YAAcoI,EAAM+B,KAAK,SAAA7B,GAAC,OAAIA,EAAErH,KAAOiL,EAAOjM,OAAhB,2BAA6BqI,GAA7B,IAAgC3I,MAAOuM,EAAOvM,QAAS2I,KAC/F+D,EAEX,IAAK,eACD,IAAMA,EAAS,eAAO3J,GAItB,OAFA2J,EAAUH,EAAO5B,SAASrJ,IAAM,GAEzBoL,EAEX,IAAK,kBACD,IAAMA,EAAS,eAAO3J,GAEtB,cADO2J,EAAUH,EAAOjL,IACjBoL,EAGX,QACI,OAAO3J,IQlGfC,IVWsB,WAAoF,IAAnFD,EAAkF,uDAAxD5B,EAAcoL,EAA0C,uCAE1G,OAAQA,EAAOlL,MAEX,IAAK,iBAED,OAAO,2BAAI0B,GAAX,IAAkBnB,OAAQ2K,EAAO3K,SAEpC,IAAK,kBACD,OAAO,2BAAImB,GAAX,IAAkBlB,MAAO0K,EAAO1K,QAGpC,IAAK,qBACD,OAAO,2BAAIkB,GAAX,IAAkBjB,cAAeyK,EAAOzK,gBAG7C,QAEI,OAAOiB,IU5BdY,KXMuB,WAAoF,IAAnFZ,EAAkF,uDAAxD5B,EAAcoL,EAA0C,uCAE3G,OAAQA,EAAOlL,MAEX,IAAK,yBAED,OAAO,2BAAI0B,GAAX,IAAkBtB,WAAY8K,EAAO5K,QAEzC,QACI,OAAOoB,MWRL+J,GAAQC,aAAYV,GAAaW,aAAgBC,OAG9DC,OAAOJ,MAAQA,GCTfK,IAASjB,OACP,eAAC,IAAD,WACI,cAAC,IAAMkB,WAAP,UAGE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,GAAD,QALV,OAUAO,SAASC,eAAe,SAM1BxO,K,mBC5BAyO,EAAOC,QAAU,CAAC,SAAW,gC,mBCA7BD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,kBAAoB,oCAAoC,MAAQ,wBAAwB,SAAW,2BAA2B,cAAgB,gCAAgC,iBAAmB,mCAAmC,iBAAmB,mCAAmC,MAAQ,wBAAwB,aAAe,iC,mBCAnYD,EAAOC,QAAU,CAAC,SAAW,0B","file":"static/js/main.8653beee.chunk.js","sourcesContent":["import axios from 'axios'\nimport React, {useCallback} from 'react'\nimport { DeleteTodolist } from '../Store/todolists-api.stories'\n\nconst instance = axios.create({\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n   withCredentials: true,\n    headers: {\n        'API-KEY': 'cb837fe2-1523-4fe4-be8e-89a2fb123dce'\n    } \n})\n\n\nexport type TodoListType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n\n//type\n// type TodoType = {\n//     id: string\n//     title: string\n//     addedDate: string\n//     order: number\n// }\n\n// export const todolistAPI = {\n\n//     getTodos() {\n//         return instance.get<TodoType[]>('todo-lists')\n//     },\n\n//     createTodo(title: string) {\n//         return instance.post<CommonResponseType<{item: TodoType}>>('todo-lists', {title})\n//     },\n\n//     deleteTodo(todoId: string) {\n//         return instance.delete<CommonResponseType>(`todo-lists/${todoId}`)\n//     },\n\n//     updateTodoTitle(todoId: string, title: string){\n//         return instance.put<CommonResponseType>(`todo-lists/${todoId}`, {title})\n//     }\n// }\n\n// Without types\n\nexport const todolistAPI = {\n\n    getTodos() {\n        //return instance.get('todo-lists')\n        const promise = instance.get<TodoListType[]>('todo-lists');\n        return promise;\n    },\n\n    createTodo(title: string) {\n        //return instance.post('todo-lists', {title})\n        const promise = instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\n        return promise;\n    },\n\n    deleteTodo(todoId: string) {\n        //return instance.delete(`todo-lists/${todoId}`)\n        const promise = instance.delete<ResponseType>(`todo-lists/${todoId}`);\n        return promise;\n    },\n\n    updateTodoTitle(todoId: string, title: string){\n        //return instance.put(`todo-lists/${todoId}`, {title})\n        const promise = instance.put<ResponseType>(`todo-lists/${todoId}`, {title: title});\n        return promise;\n    },\n\n    getTasks(todolistId: string){\n        //return instance.get(`todo-lists/${todoId}/tasks`)\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n\n    deleteTask(todolistId: string, taskId: string){\n        //return instance.delete(`todo-lists/${todoId}/tasks/${taskId}`)\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n\n    createTask(todolistId: string, title: string) {\n        //return instance.post(`todo-lists/${todoId}/tasks`, {title})\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title});\n    },\n\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        //return instance.post(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\nexport type LoginType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\nexport const authAPI = {\n\n    login(data: LoginType) {\n        const promise = instance.post<ResponseType<{userId: number}>>('auth/login', data);\n        return promise;\n    },\n    me() {\n        const promise = instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me');\n        return promise;\n    },\n    logout(){\n        const promise = instance.delete<ResponseType>('auth/login');\n        return promise;\n    }\n    \n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FilterValueType } from '../App';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport  { Dispatch } from 'redux'\nimport { AppRootState } from './store';\nimport { todolistAPI, TodoListType } from '../api/todolist-api';\nimport { act } from 'react-dom/test-utils';\nimport { AccessTimeOutlined } from '@material-ui/icons';\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from './app-reducer';\nimport { AxiosError } from 'axios';\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\n\n// Old way for types\n\n// export type RemoveTodolistActionType = {\n//     type: \"REMOVE-TODOLIST\"\n//     id: string\n// }\n// export type AddTodolistActionType = {\n//     type: \"ADD-TODOLIST\"\n//     title: string\n//     todolistId: string\n// }\n// type ChangeTodolistTitleActionType = {\n//     type: \"CHANGE-TODOLIST-TITLE\"\n//     id: string\n//     title: string\n// }\n// type ChangeTodolistFilterActionType = {\n//     type: \"CHANGE-TODOLIST-FILTER\",\n//     id: string\n//     filter: FilterValueType\n// }\n\n// Types for export\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodoListActionType = ReturnType<typeof setTodoListsAC>\n\n// Action type\ntype ActionsType =  |\n                    RemoveTodolistActionType | \n                    AddTodolistActionType | \n                    ReturnType<typeof changeTodolistTitleAC> | \n                    ReturnType<typeof changeTodolistFilterAC> |\n                    SetTodoListActionType |\n                    ReturnType<typeof cnangeTodoListEntityStatus>\n\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodolistDomainType = TodoListType & {\n    filter: FilterValuesType;\n    entityStatus: RequestStatusType;\n}\n// Initial state empty array\nconst initialState: Array<TodolistDomainType> = []\n\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType):Array<TodolistDomainType> => {\n\n    switch(action.type){\n\n        case 'SET-TODOLISTS': {\n            \n            return action.todolists.map( (tl) => {\n                return {...tl, filter: 'all', entityStatus: 'idle'}\n            }) \n        }\n\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id != action.id)\n        }\n\n        case 'ADD-TODOLIST': {\n\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n        }\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.title = action.title;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-TODOLIST-FILTER': {\n            \n            const todolistToUpdate = state.find( tl => tl.id === action.id);\n            if(todolistToUpdate){ \n                todolistToUpdate.filter = action.filter;\n            }\n            return [...state]\n        }\n\n        case 'CHANGE-ENTITY-STATUS': {\n            return state.map( tl => tl.id === action.todolistId ? {...tl, filter: 'all', entityStatus: action.entityStatus} : tl)\n                //return {...tl, filter: 'all', entityStatus: tl.id === action.todolistId ? action.entityStatus : 'idle'}})\n        }\n            \n        default: \n            return state;\n\n    }\n    \n}\n\n\n// Action Creators\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {type: \"REMOVE-TODOLIST\", id: todolistId} as const\n}\nexport const addTodolistAC = (todolist: TodoListType) => {\n    return {type: \"ADD-TODOLIST\", todolist} as const\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: todolistId, title: title} as const\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValueType) => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter} as const\n}\nexport const setTodoListsAC = (todolists: Array<TodoListType>) => {\n    return {type: \"SET-TODOLISTS\", todolists} as const\n}\nexport const cnangeTodoListEntityStatus = (todolistId: string, entityStatus: RequestStatusType) => {\n    return {type: \"CHANGE-ENTITY-STATUS\" , todolistId, entityStatus} as const\n}\n\n\n// Response code from Server \nexport enum ResponseStatuses {\n    success = 0,\n    error = 1,\n    captcha = 10\n}\n\n//\n//thunk creators\n//\nexport const fetchTodolistsThunkCreator = () => (dispatch: Dispatch, getState: () => AppRootState) => {\n    \n    console.log('Fetching todos')\n    \n    // 1 server requests\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n    todolistAPI.getTodos()\n      .then( (res) => {\n        \n        // 2 dispatch actions\n        dispatch(setTodoListsAC(res.data))\n        dispatch(setAppStatusAC('succeeded')) // Preloader OFF \n        \n      })\n      .catch( (err: AxiosError) => {\n            \n        handleServerNetworkError(dispatch, err.message) // Func from error-utils.ts\n    })\n}\n\nexport const createTodolistThunkCreator = (title: string) => (dispatch: Dispatch) => {\n\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n    todolistAPI.createTodo(title)\n        .then( (res) => {\n            if (res.data.resultCode === ResponseStatuses.success){\n                \n                const todo = res.data.data.item\n                dispatch(addTodolistAC(todo))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF \n\n            } else {\n                handleServerAppError(dispatch, res.data) // Func from error-utils.ts\n            }\n        })\n        .catch( (err: AxiosError) => {\n            \n            handleServerNetworkError(dispatch, err.message) // Func from error-utils.ts\n        })\n}\n\nexport const deleteTodolistThunkCreator = (todoId: string) => (dispatch: Dispatch) => {\n\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n\n    dispatch(cnangeTodoListEntityStatus(todoId, 'loading')) // To disable the button after Delete has pressed\n    todolistAPI.deleteTodo(todoId)\n        .then( (res) => {\n            if (res.data.resultCode === ResponseStatuses.success){\n                \n                dispatch(removeTodolistAC(todoId))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF  \n            \n            } else {\n                \n                handleServerAppError(dispatch, res.data) // Func from error-utils.ts\n            }\n        })\n        .catch( (err: AxiosError) => {\n            \n            handleServerNetworkError(dispatch, err.message) // Func from error-utils.ts\n        })\n}\n\nexport const updateTodoTitleThunkCreator = (todoId: string, title: string) => (dispatch: Dispatch) => {\n\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n\n    todolistAPI.updateTodoTitle(todoId, title)\n        .then( (res) => {\n            \n            if (res.data.resultCode === ResponseStatuses.success){\n                \n                dispatch(changeTodolistTitleAC(todoId, title))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF\n\n            } else {\n                \n                handleServerAppError(dispatch, res.data) // Func from error-utils.ts\n            }\n        })\n        .catch( (err: AxiosError) => {\n            \n            handleServerNetworkError(dispatch, err.message) // Func from error-utils.ts\n        })\n}\n\n","import React from 'react'\nimport { setAppErrorAC, setAppStatusAC } from '../Store/app-reducer'\nimport { Dispatch } from 'redux'\nimport {ResponseType} from './../api/todolist-api'\n\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorActionsType>, message: string) => {\n    \n    dispatch(setAppErrorAC(message)) // Error Message to show \n    //dispatch(setAppStatusAC('failed')) // Preloader OFF\n\n}\n\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorActionsType>, data: ResponseType<T>) => {\n\n    if(data.messages.length){\n        \n        const errorMessage = data.messages[0] \n        dispatch(setAppErrorAC(errorMessage)) // Error Message to show    \n    \n    } else {\n        dispatch(setAppErrorAC('Some error occurred')) // Error Message to show    \n    }\n    dispatch(setAppStatusAC('failed')) // Preloader OFF\n\n}                             \n\n// DIspatch Type\nexport type ErrorActionsType =  ReturnType<typeof setAppStatusAC> |\n                                ReturnType<typeof setAppErrorAC>\n","import { authAPI } from './../api/todolist-api';\nimport React from 'react' \nimport { Dispatch } from 'redux'  \nimport { LoginType, todolistAPI } from '../api/todolist-api'\nimport { setAppErrorAC, setAppStatusAC } from './app-reducer'\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\nimport { AxiosError } from 'axios';\nimport { ResponseStatuses } from './todolists-reducer';\n\n \n\nconst initialState = { \n   isLoggedIn: false \n} \n\ntype InitialStateType = typeof initialState \n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => { \n\n   switch (action.type) { \n\n       case 'login/SET-IS-LOGGED-IN': \n            \n           return {...state, isLoggedIn: action.value} \n\n       default: \n           return state \n   } \n\n} \n\n// actions \nexport const setIsLoggedInAC = (value: boolean) => \n\n   ({type: 'login/SET-IS-LOGGED-IN', value} as const) \n\n// thunks \n\nexport const loginTC = (data: LoginType) => (dispatch: Dispatch<ActionsType>) => { \n\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n    authAPI.login(data)\n        .then( (res) => {\n            if (res.data.resultCode === ResponseStatuses.success){\n                \n                \n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF \n\n            } else {\n                handleServerAppError(dispatch, res.data) // Func from error-utils.ts\n            }\n        })\n        .catch( (err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message) // Func from error-utils.ts\n        })\n    }\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => { \n\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n    authAPI.logout()\n        .then( (res) => {\n            if (res.data.resultCode === ResponseStatuses.success){\n                \n                \n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF \n\n            } else {\n                handleServerAppError(dispatch, res.data) // Func from error-utils.ts\n            }\n        })\n        .catch( (err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message) // Func from error-utils.ts\n        })\n\n    }\n// types \ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | \n                   ReturnType<typeof setAppStatusAC>  |\n                   ReturnType<typeof setAppErrorAC>","import { authAPI } from './../api/todolist-api';\nimport { AccessTimeOutlined } from '@material-ui/icons';\nimport React from 'react';\nimport  { Dispatch } from 'redux'\nimport { setIsLoggedInAC } from './auth-reducer';\nimport { ResponseStatuses } from './todolists-reducer';\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\nimport { AxiosError } from 'axios';\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed' ;\n\n\nconst initialState = { \n\n   status: 'idle' as RequestStatusType,\n   error: null as string | null,\n   isInitialized: false \n} \n\ntype InitialStateType = typeof initialState \n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => { \n\n   switch (action.type) { \n\n       case 'APP/SET-STATUS': \n\n           return {...state, status: action.status} \n\n        case 'APP/ERROR-RESET': {\n            return {...state, error: action.error}\n        }\n\n        case 'APP/IS-INITIALIZED': {\n            return {...state, isInitialized: action.isInitialized}\n        }\n\n       default: \n\n           return state \n\n   } \n\n} \n\n// Action creator\nexport const setAppStatusAC = (status: RequestStatusType) => {\n    return {\n        type: 'APP/SET-STATUS',\n        status\n    } as const \n}\n\nexport const setAppErrorAC = (error: string | null) => {\n    return {\n        type: 'APP/ERROR-RESET',\n        error\n    } as const\n}\nexport const setIsInitialized = (isInitialized: boolean) => {\n    return {\n        type: 'APP/IS-INITIALIZED',\n        isInitialized\n    } as const\n}\n\n//Thunk\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n\n    console.log('App initializing!')\n    dispatch(setAppStatusAC('loading')) // Preloader ON\n    authAPI.me()\n        .then((res) => {\n            \n            if (res.data.resultCode === ResponseStatuses.success){\n                \n                dispatch(setIsLoggedInAC(true))\n                dispatch(setIsInitialized(true))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF\n                \n            } else {\n                \n                dispatch(setAppStatusAC('failed')) // Preloader OFF\n                //handleServerAppError(dispatch, res.data) // Func from error-utils.ts\n            }\n        })\n        .catch( (err: AxiosError) => {\n            \n            handleServerNetworkError(dispatch, err.message) // Func from error-utils.ts\n        })\n        .finally(()=>{\n            dispatch(setIsInitialized(true))\n        })\n}\n\n\ntype ActionsType = | \n                    ReturnType<typeof setAppStatusAC> |\n                    ReturnType<typeof setAppErrorAC> |\n                    ReturnType<typeof setIsInitialized>","import React from 'react' \nimport Snackbar from '@material-ui/core/Snackbar' \nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert' \nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppRootState } from '../../Store/store'\nimport { setAppErrorAC } from '../../Store/app-reducer'\n\n \n\nfunction Alert(props: AlertProps) { \n\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} /> \n\n} \n\n \nexport function ErrorSnackbar() { \n\n   \n   const error = useSelector<AppRootState, string | null>(state => state.app.error)\n   const dispatch = useDispatch();\n\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => { \n\n       if (reason === 'clickaway') { \n           return \n       } \n       dispatch(setAppErrorAC(null));\n   } \n\n \n\n   return ( \n\n       <Snackbar open={error != null} autoHideDuration={6000} onClose={handleClose}> \n\n           <Alert onClose={handleClose} severity=\"error\"> \n\n               {error}\n\n           </Alert> \n\n       </Snackbar> \n\n   ) \n\n} ","\nimport { AppRootState } from './store';\n// import { TaskType } from './../Todolist';\nimport { FilterValueType, TasksStateType } from '../App';\nimport React from 'react';\nimport { v1 } from 'uuid';\nimport  { Dispatch } from 'redux'\nimport { AccessTimeOutlined } from '@material-ui/icons';\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodoListActionType, } from './todolists-reducer';\nimport { TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType } from '../api/todolist-api';\nimport { setAppErrorAC, setAppStatusAC } from './app-reducer';\n\n\n\n//Action type\ntype ActionsType = |\n                    ReturnType<typeof removeTaskAC> | \n                    ReturnType<typeof addTaskAC> | \n                    ReturnType<typeof  changeTaskStatusAC> | \n                    ReturnType<typeof changeTaskTitleAC> | \n                    AddTodolistActionType | \n                    RemoveTodolistActionType | \n                    SetTodoListActionType |\n                    ReturnType<typeof fetchTasksAC>\n\n//export type TaskStatuses = number;\n\n// Initial state\nconst initialState: TasksStateType = {\n    // [todoListId_1] : [{ id: v1(), title: 'CSS', isDone: true },\n    //   { id: v1(), title: 'JS', isDone: true },\n    //   { id: v1(), title: 'React', isDone: false },\n    //   { id: v1(), title: 'HTML', isDone: false },],\n    // [todoListId_2] : [{ id: v1(), title: 'CSS', isDone: true },\n    //   { id: v1(), title: 'Book', isDone: true },\n    //   { id: v1(), title: 'Beer', isDone: false },\n    //   { id: v1(), title: 'Milk', isDone: false },],\n  }                \n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n\n    switch(action.type){\n\n        \n        case 'SET-TODOLISTS':{\n            const stateCopy = {...state}\n            action.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            }) \n            \n            return stateCopy;\n        }\n        \n        case 'SET-TUSKS': {\n            const stateCopy = {...state}\n            stateCopy[action.todoId] = action.tasks\n            return stateCopy\n        }\n\n        case 'REMOVE-TASK' : {\n            \n            const stateCopy = {...state}\n            const tasks = state[action.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = filteredTasks\n \n            return stateCopy;\n        }\n        case 'ADD-TASK' : {\n            \n            const stateCopy = {...state};\n            const tasks = stateCopy[action.task.todoListId];\n            const newTasks = [action.task, ...tasks];\n            stateCopy[action.task.todoListId] = newTasks;\n            \n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n            \n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, status: action.status} : t)\n            \n            return stateCopy;\n        }\n        case 'CHANGE-TASK-TITLE' : {\n\n            const stateCopy = {...state};\n            const tasks = stateCopy[action.todolistId];\n\n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.taskId ? {...t, title: action.title} : t)\n            return stateCopy;\n        }\n        case 'ADD-TODOLIST' : {\n            const stateCopy = {...state}\n\n            stateCopy[action.todolist.id] = []\n\n            return stateCopy\n        } \n        case \"REMOVE-TODOLIST\" : {\n            const stateCopy = {...state}\n            delete stateCopy[action.id]  // delete property\n            return stateCopy\n        } \n        \n        default: \n            return state;\n\n    }\n    \n}\n\n// Action Creators\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n    return {type: \"REMOVE-TASK\", todolistId, taskId} as const\n}\nexport const addTaskAC = (task: TaskType) => {\n    return {type: \"ADD-TASK\", task} as const\n}\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => {\n    return {type: \"CHANGE-TASK-STATUS\", taskId, status, todolistId} as const\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {type: \"CHANGE-TASK-TITLE\", taskId, title, todolistId} as const\n}\n\nexport const fetchTasksAC = (todoId: string, tasks: Array<TaskType>) => {\n    return {type: 'SET-TUSKS', todoId, tasks} as const\n}\n\n\n// Response code from Server \nenum ResponseStatuses {\n    success = 0,\n    error = 1,\n    captcha = 10\n}\n//\n//Thunk creator\n//\nexport const fetchTasksThunkCreator = (todoId: string) => (dispatch: Dispatch) => {\n\n        console.log('Fetching task!!! for: ' + todoId)\n        dispatch(setAppStatusAC('loading')) // Preloader ON\n        \n        todolistAPI.getTasks(todoId)\n            .then((res)=> {\n\n                dispatch(fetchTasksAC(todoId, res.data.items))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF \n        }) \n    \n}\n\nexport const deleteTaskThunkCreator = (todoId: string, taskId: string) => (dispatch: Dispatch) => {\n\n        dispatch(setAppStatusAC('loading')) // Preloader ON\n        \n        todolistAPI.deleteTask(todoId, taskId)\n            .then( (res) => {\n                \n                if (res.data.resultCode === ResponseStatuses.success){\n                    dispatch(removeTaskAC(taskId, todoId))\n                    dispatch(setAppStatusAC('succeeded')) // Preloader OFF\n                }\n            })\n}\n\nexport const createTaskThunkCreator = (todoId: string, title: string) => (dispatch: Dispatch) => {\n\n        dispatch(setAppStatusAC('loading')) // Preloader ON\n        \n        todolistAPI.createTask(todoId, title)\n            .then( (res) => {\n                // debugger\n                if (res.data.resultCode === ResponseStatuses.success){\n                    const task = res.data.data.item\n                    \n                    dispatch(addTaskAC(task))\n                    dispatch(setAppStatusAC('succeeded')) // Preloader OFF\n                } else {\n                    // Check if message has any ite,s at all\n                    if(res.data.messages.length){\n                        dispatch(setAppErrorAC(res.data.messages[0]))    \n                    } else {\n                        dispatch(setAppErrorAC('Some error occurred'))    \n                    }\n                    dispatch(setAppStatusAC('failed')) // Preloader OFF\n                }\n            })\n}\n\nexport const updateTaskStatusThunkCreator = (todoId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootState ) => {\n\n        dispatch(setAppStatusAC('loading')) // Preloader ON\n\n        const state = getState();\n        const allTasks = state.tasks;\n        const allTasksForClickedTodo = allTasks[todoId]\n        const clickedTask = allTasksForClickedTodo.find( (t) => {\n            return t.id === taskId\n        }) \n\n        //const model: any = {...clickedTask, status}\n        \n        if(clickedTask) {\n\n            const model: UpdateTaskModelType = {\n                title: clickedTask.title,\n                status: status,\n                description: clickedTask.description,\n                startDate: clickedTask.startDate,\n                priority: clickedTask.priority,\n                deadline: clickedTask.deadline\n            }\n\n            todolistAPI.updateTask(todoId, taskId, model)\n            .then( (res) => {\n                dispatch(changeTaskStatusAC(taskId, status, todoId))\n                dispatch(setAppStatusAC('failed')) // Preloader OFF\n            })\n        }\n}\n\nexport const updateTaskTitleTC = (todoId: string, taskId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootState ) => {\n\n        dispatch(setAppStatusAC('loading')) // Preloader ON\n\n        const state = getState();\n        const allTasks = state.tasks;\n        const allTasksForClickedTodo = allTasks[todoId]\n        const clickedTask = allTasksForClickedTodo.find( (t) => {\n            return t.id === taskId\n        }) \n        \n        if(clickedTask) {\n\n            //@ts-ignore\n            const model: UpdateTaskModelType = {\n                title: title,\n                status: clickedTask.status,\n                description: clickedTask.description,\n                startDate: clickedTask.startDate,\n                priority: clickedTask.priority,\n                deadline: clickedTask.deadline\n            }\n\n            todolistAPI.updateTask(todoId, taskId, model)\n            .then( (res) => {\n                dispatch(changeTaskTitleAC(taskId, title, todoId))\n                dispatch(setAppStatusAC('succeeded')) // Preloader OFF\n            })\n        }\n}","import React from 'react' \n\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core' \nimport {useFormik} from 'formik';\nimport { loginTC } from '../../Store/auth-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from '../../Store/store';\nimport { Redirect } from 'react-router-dom';\n \n\ntype FormikErrorType = { \n\n    email?: string \n    password?: string \n    rememberMe?: boolean \n } \n\n\nexport const Login = () => { \n\n    const dispatch = useDispatch();\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => { \n\n            const errors: FormikErrorType = {}; \n            if (!values.email) { \n                errors.email = 'Required'; \n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) { \n     \n                errors.email = 'Invalid email address'; \n            } \n\n            if(!values.password){\n                errors.password = 'Required';\n            } else if (values.password.length < 4) {\n     \n                errors.password = 'Password to short'; \n            }\n\n            return errors; \n        }, \n        onSubmit: values => {\n            // alert(JSON.stringify(values, null, 2))\n            dispatch(loginTC(values))\n            formik.resetForm();\n        },\n    });\n\n    if(isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n   return <Grid container justify=\"center\"> \n\n       <Grid item xs={4}> \n           <FormControl> \n               <FormLabel> \n                   <p>To log in get registered  \n                     <a style={{'textDecoration': 'none'}} href={'https://social-network.samuraijs.com/'} \n                        target={'_blank'}> here \n                     </a> \n                   </p> \n                   <p>or use common test account credentials:</p> \n                   <p>Email: free@samuraijs.com</p> \n                   <p>Password: free</p> \n               </FormLabel> \n               \n               <form onSubmit={formik.handleSubmit}>\n                        <FormGroup> \n                            <TextField \n                                label=\"Email\" \n                                margin=\"normal\" \n                                // name=\"email\"\n                                // onChange={formik.handleChange}\n                                // value={formik.values.email}\n                                // onBlur={formik.handleBlur}\n                                {...formik.getFieldProps('email')}\n                            />\n                             {/* Show error if field has touched and has error */}\n                            {formik.touched.email && formik.errors.email && \n                            <div style={{'color': 'red'}}>{formik.errors.email}</div>}\n\n                            <TextField \n                                type=\"password\" \n                                label=\"Password\" \n                                margin=\"normal\"\n                                // name=\"password\"\n                                // onChange={formik.handleChange}\n                                // value={formik.values.password} \n                                // onBlur={formik.handleBlur}\n                                {...formik.getFieldProps('password')}\n                            /> \n                            {/* Show error if field has touched and has error */}\n                            {formik.touched.password && formik.errors.password && \n                            <div style={{'color': 'red'}}>{formik.errors.password}</div>}\n\n                            <FormControlLabel \n                                label={'Remember me'} \n                                control={<Checkbox  {...formik.getFieldProps('rememberMe')}/>} \n                            /> \n\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button> \n                        </FormGroup> \n               </form>\n\n           </FormControl> \n       </Grid> \n\n   </Grid> \n\n} ","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\nimport { IconButton, TextField } from '@material-ui/core';\n// import c from '../../Todolist.module.css';\nimport { AddBox } from '@material-ui/icons';\n// import { useDispatch } from 'react-redux';\n// import { addTaskAC } from '../../Store/tasks-reducer';\n// import { v1 } from 'uuid';\nimport style from './AddItemForm.module.css'\n\ntype AddItemPropsType = {\n    addItem: (title: string) => void;\n    disable: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemPropsType) => {\n\n    console.log('AddItemForm has called')\n    let [title, setTitle] = useState<string>('');\n    let [error, setError] = useState<boolean>(false);\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)  \n    }\n\n    const addTaskOnClick = () => {\n\n        if(title.trim() !== \"\" ) {\n          props.addItem(title.trim());\n          setTitle('');\n        } else {\n          setError(true);\n        }\n        \n      };\n    \n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\n    if(error !== false){\n        setError(false);\n    }\n    if (e.key === 'Enter') addTaskOnClick();\n    };\n\n    return(\n        <div className={style.itemForm}>\n            {/* <input\n            className={`${c.taskInput} ${error ? c.error: \"\"}`}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            /> */}\n            {/*  */}\n          <TextField\n            disabled={props.disable}\n            size={'small'}\n            variant={'outlined'}\n            error={error}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            onKeyPress={onKeyPressAddTask}\n            label={\"Title\"}\n            helperText={error && 'Title is required!'}\n            onBlur={ () => setError(false)}\n          />\n        {/* <button className={c.addTaskButton} onClick={addTaskOnClick}>\n          +\n        </button> */}\n        <IconButton disabled={props.disable} \n                    onClick={addTaskOnClick} \n                    style={{width: '5px'}} color={'primary'}>\n          <AddBox \n            style={{marginLeft: '25px'}}\n          />\n        </IconButton>\n\n            {/* {error && <div className={c.errorMessage}>Title is required!</div>} */}\n      </div>\n    )\n})","import React, { ChangeEvent, useState, useCallback } from 'react';\n\n\n\ntype EditableSpanPropsType = {\n    title: string\n    onChangeTitle: (newValue: string) => void;\n  }\n  \nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  \n    console.log('Editable Span')\n    \n    let [editMode, setEditMode] = useState(false)\n    let [title, setTile] = useState('')\n\n    let activateEditMode = () => {\n        setTile(props.title)\n        setEditMode(true)\n    }\n\n    let deactivateEditMode = () => {\n        setEditMode(false)\n        props.onChangeTitle(title)\n    }\n    const onChangeTitleHandler = (e : ChangeEvent<HTMLInputElement>) => setTile(e.currentTarget.value);\n\n      return (    \n        editMode ?\n        <input value={title} onChange={onChangeTitleHandler} onBlur={deactivateEditMode} autoFocus></input> :\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\n      )\n  })","import React, {useCallback, ChangeEvent} from 'react'\nimport { useDispatch } from 'react-redux';\nimport { changeTaskStatusAC, changeTaskTitleAC, deleteTaskThunkCreator, removeTaskAC, updateTaskStatusThunkCreator, updateTaskTitleTC } from '../../Store/tasks-reducer';\nimport { EditableSpan } from '../EditableSpan/EditableSpan';\nimport { Delete } from '@material-ui/icons';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport style from './Task.module.css';\nimport { TaskStatuses, TaskType } from '../../api/todolist-api';\n\ntype TaskPropsType = {\n    todolistId: string,\n    task: TaskType\n  } \n  \nexport const Task = React.memo((props: TaskPropsType) => {\n\n      \n      const dispatch = useDispatch();  \n  \n      const onChangeTaskTitleHandler = useCallback((newValue: string) => {\n          //dispatch(changeTaskTitleAC(props.task.id, newValue, props.todolistId))\n          dispatch(updateTaskTitleTC(props.todolistId, props.task.id, newValue))\n      }, [])\n\n      const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        //props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n        dispatch(updateTaskStatusThunkCreator(props.todolistId, props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New))\n\n    }, [props.task.id, props.todolistId]);\n\n  \n  return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\n    <div className={style.taskLine}>\n      <div>\n  \n        <Checkbox \n            color={'primary'}\n            checked={props.task.status === TaskStatuses.Completed} \n            // onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}}\n            onChange={onChangeHandler}\n            />\n        {/* <input onChange={ () => {props.changeStatus(t.id, !t.isDone, props.id)}} type=\"checkbox\" checked={t.isDone} /> */}\n        \n        {/* <span>{t.title}</span> */}\n        <EditableSpan title={props.task.title} onChangeTitle={onChangeTaskTitleHandler}/>\n      \n      {/* Remove task Button */}\n  \n      </div>\n      {/* <div className={c.buttonRemoveTask}> */}\n      <div>\n        {/* <button\n          onClick={() => {\n            props.removeTask(t.id, props.id);\n          }}\n        >\n          X\n        </button> */}\n        <IconButton onClick={() => {\n            dispatch(deleteTaskThunkCreator(props.todolistId, props.task.id))\n        }}>\n          <Delete/>\n        </IconButton>\n      </div>\n    </div>\n  </div>\n  })","import React, { useCallback, useEffect } from 'react';\nimport { preProcessFile, StringMappingType } from 'typescript';\nimport { v1 } from 'uuid';\nimport { FilterValueType,  TasksStateType} from '../../App';\nimport { AddItemForm } from '../AddItemForm/AddItemForm';\nimport c from './Todolist.module.css';\nimport {EditableSpan} from '../EditableSpan/EditableSpan';\nimport { Button, Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from '../../Store/store';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, createTaskThunkCreator, fetchTasksThunkCreator, removeTaskAC } from '../../Store/tasks-reducer';\nimport { changeTodolistFilterAC, changeTodolistTitleAC, updateTodoTitleThunkCreator } from '../../Store/todolists-reducer';\nimport { Task } from '../Task/Task';\nimport { TaskStatuses, TaskType } from '../../api/todolist-api';\nimport { RequestStatusType } from '../../Store/app-reducer';\nimport { Redirect } from 'react-router-dom';\n\n// export type TaskType = {\n//   todoListId: string;\n//   id: string;\n//   title: string;\n//   status: TaskStatuses;\n// };\n\ntype PropsTypeTodolist = {\n  todolistId: string; \n  title: string;\n  filter: FilterValueType;\n  changeTodoListTitle: (newTitle: string, todoListId: string) => void;\n  removeTodoList: (id: string) => void;\n  entityStatus: RequestStatusType;\n};\n\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\n\n  // console.log('ToDolist Called')\n  const tasks = useSelector<AppRootState, Array<TaskType>>( state => state.tasks[props.todolistId])\n  const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    // console.log('Task fetching!!!')\n    dispatch(fetchTasksThunkCreator(props.todolistId))\n  }, [dispatch])\n\n\n  // Filter functions\n  const showAll = useCallback(() => {\n    //props.changeFilter(props.id, 'all');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'all'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n  \n  const showActive = useCallback(() => {\n    //props.changeFilter(props.id, 'active');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'active'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n  \n  const showCompleted = useCallback(() => {\n    //props.changeFilter(props.id, 'completed');\n    dispatch(changeTodolistFilterAC(props.todolistId, 'completed'))\n  }, [changeTodolistFilterAC, props.todolistId]);\n\n  const removeTodoList = useCallback(() => {\n    props.removeTodoList(props.todolistId);\n  },[props.removeTodoList, props.todolistId]);\n\n  const changeTodoListTileHandler = useCallback((newValue: string) => {\n    //props.changeTodoListTitle(props.id, newValue)\n    //dispatch(changeTodolistTitleAC(props.todolistId, newValue))\n    dispatch(updateTodoTitleThunkCreator(props.todolistId, newValue));\n\n  }, [changeTodolistTitleAC, props.todolistId]);\n\n  const addTask = useCallback((title: string) => {\n    //dispatch(addTaskAC(title, props.todolistId))\n    dispatch(createTaskThunkCreator(props.todolistId, title))\n  },[props.todolistId, createTaskThunkCreator])\n\n\n    // We gonna show task only depends what filter selected\n    let tasksForTodoList = tasks;\n    if (props.filter === 'completed') {\n      tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.Completed);\n    }\n    if (props.filter === 'active') {\n      tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.New);\n    }\n\n    \n\n  return (\n    \n      <div>\n      \n      <div className={c.titleDiv}>\n        <EditableSpan title={props.title} onChangeTitle={changeTodoListTileHandler}/>\n        \n        {/* Delete Button */}\n        <IconButton onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\n                  <Delete/>\n        </IconButton>\n        \n        {/* <h3 className={c.title}>{props.title}</h3> */}\n      </div>\n      \n\n      <AddItemForm addItem={addTask} disable={props.entityStatus === 'loading'}/> \n      {/* addItem={props.addTask} todoListId={props.id}/> */}\n\n      <div>\n        {\n            tasksForTodoList.map( t => <Task \n                                          task={t} \n                                          todolistId={props.todolistId} \n                                          key={t.id}\n                                        />)\n        }\n      </div>\n\n      <div>\n        {/* Without material-ui using CSS only */}\n        {/* <button className={props.filter === \"all\" ? \"activeFilter\" : \"\"} onClick={showAll}>All</button>\n        <button className={props.filter === \"active\" ? \"activeFilter\" : \"\"} onClick={showActive}>Active</button>\n        <button className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} onClick={showCompleted}>Completed</button> */}\n\n        {/* Using material-ui */}\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            variant={props.filter === \"all\" ? \"contained\" : 'outlined'}\n            color={'primary'}\n            //className={props.filter === \"all\" ? \"activeFilter\" : \"\"} \n            onClick={showAll}>All</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px'}}\n            color={'primary'}\n            variant={props.filter === \"active\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"active\" ? \"activeFilter\" : \"\"} \n            onClick={showActive}>Active</Button>\n        <Button \n            size={'small'}\n            style={{margin: '5px', width: '100px'}}\n            color={'primary'}\n            variant={props.filter === \"completed\" ? \"contained\" : 'outlined'}\n            //className={props.filter === \"completed\" ? \"activeFilter\" : \"\"} \n            onClick={showCompleted}>Completed</Button>\n      </div>\n    </div>\n  );\n})\n\n\n","import React, {useCallback, useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TaskType } from '../../api/todolist-api';\nimport { initializeAppTC, RequestStatusType } from '../../Store/app-reducer';\nimport { logoutTC } from '../../Store/auth-reducer';\nimport { AppRootState } from '../../Store/store';\nimport { changeTodolistTitleAC, createTodolistThunkCreator, deleteTodolistThunkCreator, fetchTodolistsThunkCreator, TodolistDomainType } from '../../Store/todolists-reducer';\nimport { CircularProgress } from '@material-ui/core';\nimport { AppBar, Button, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\nimport { AddItemForm } from '../AddItemForm/AddItemForm';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { Menu } from '@material-ui/icons';\nimport { Login } from '../Login/Login';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { ErrorSnackbar } from '../ErrorSnackbar/errorSnackbar';\nimport { Todolist } from './Todolist';\n\n\nexport type FilterValueType = 'all' | 'completed' | 'active';\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>\n}\n\nfunction TodolistsList() {\n  // console.log('App Called');\n  \n\n  const dispatch = useDispatch();\n  const todoLists = useSelector<AppRootState, Array<TodolistDomainType>>( state => state.todolist)\n  //const status = useSelector<AppRootState, RequestStatusType>( state => state.app.status)\n  const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\n  //const isInitialized = useSelector<AppRootState, boolean>(state => state.app.isInitialized)\n\n  // UseEffect Side effect\n  useEffect(() => {\n  \n    dispatch(initializeAppTC());\n    // debugger\n    // if(!isLoggedIn){ \n    //     return;\n    // }\n    \n    dispatch(fetchTodolistsThunkCreator());\n  }, [])\n\n  \n\n\n  // Comment\n  // Change title with useCallback\n  const changeTodoListTitle = useCallback((todoListId: string, newTitle: string) => {\n    dispatch(changeTodolistTitleAC(todoListId, newTitle))\n  }, [dispatch])\n\n  //remove todolist with useCallback\n  const removeTodoList = useCallback((todoListId: string) => {\n    \n    dispatch(deleteTodolistThunkCreator(todoListId))\n\n  }, [dispatch])\n\n\n  // Add to Do list callBack function with useCallback\n  const addToDolist = useCallback((title: string) => {\n    //dispatch(addTodolistAC(title))\n    dispatch(createTodolistThunkCreator(title))\n  }, [dispatch]);\n\n  \n\n  if(!isLoggedIn){ \n    return <Redirect to={'/login'}/>\n  }\n  // Preloader showing before initialized \n  // if(!isInitialized){\n  //   return <div style={{'position': 'fixed', 'top': '49%', 'left': '49%'}}>\n  //     <CircularProgress />\n  //   </div>\n  // }\n  \n\n   return <> \n   \n          <Grid container style={{padding: '20px'}}>  \n              <AddItemForm addItem={addToDolist} disable={false}/>\n          </Grid>\n                  \n          {/* {!isLoggedIn ? <Redirect to={'/login'}/> : todoListsComponents} */}\n          <Grid container spacing={3} style={{padding: '20px'}}>\n\n           {\n              todoLists.map( (td) => {\n\n              return <Grid item key={td.id}>\n                        <Paper elevation={5} style={{padding: '20px'}}>\n                          <Todolist\n                              todolistId={td.id}\n                              title={td.title}\n                              filter={td.filter}            \n                              removeTodoList={removeTodoList}\n                              changeTodoListTitle={changeTodoListTitle}\n                              entityStatus={td.entityStatus}\n                          />\n                    </Paper>\n                    </Grid>\n            \n              })\n            }\n          </Grid>\n\n \n        {/* Erorr Snackbar */}\n        <ErrorSnackbar />\n        {/* Erorr Snackbar */}\n        \n  </>    \n}\n\nexport default TodolistsList;","import React, {useCallback, useEffect} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { AppBar, Button, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport { Menu } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './Store/store';\nimport { TaskType } from './api/todolist-api';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { initializeAppTC, RequestStatusType } from './Store/app-reducer';\nimport { ErrorSnackbar } from './Components/ErrorSnackbar/errorSnackbar';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { Login } from './Components/Login/Login';\nimport { logoutTC } from './Store/auth-reducer';\nimport TodolistsList from './Components/Todolist/TodolistsList';\nimport { CircularProgress } from '@material-ui/core';\n\nexport type FilterValueType = 'all' | 'completed' | 'active';\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>\n}\n\nfunction App() {\n  // console.log('App Called');\n  \n  const dispatch = useDispatch();\n  const status = useSelector<AppRootState, RequestStatusType>( state => state.app.status)\n  const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\n  const isInitialized = useSelector<AppRootState, boolean>(state => state.app.isInitialized)\n\n    // Logout\n  const logoutHadler = useCallback( () => {\n    dispatch(logoutTC())\n  }, [dispatch])  \n\n\n  useEffect(() => {\n    dispatch(initializeAppTC())\n  }, [])\n\n  // reloader showing before initialized \n  if(!isInitialized){\n    return <div style={{'position': 'fixed', 'top': '49%', 'left': '49%'}}>\n      <CircularProgress />\n    </div>\n  }\n\n\n   return ( \n   <div className=\"App\">\n     \n       <AppBar position={'static'}>\n               <Toolbar style={{justifyContent: 'space-between'}}>\n                   <IconButton color={'inherit'}>\n                       <Menu />\n                   </IconButton>\n                   <Typography variant={'h6'}>\n                      TodoLists\n                   </Typography> \n                   \n                   {isLoggedIn &&\n                   <Button variant={'outlined'} \n                             color={'inherit'}\n                             onClick={logoutHadler}>LOGOUT</Button>}\n       \n               </Toolbar>\n       \n       {/* Preloader */}\n       {status === 'loading' && <LinearProgress />}\n       {/* Preloader */}\n       </AppBar> \n\n              {/* {todoListsComponents} */}\n              <Switch>\n                <Route exact path={'/'} render={ () => <TodolistsList/> }/>\n                <Route path={'/login'} render={ () => <Login/> }/>\n                <Route path={'/404'} render={ () => <h1 style={{'textAlign': 'center', 'fontSize': '40px'}}> 404 page not found</h1> }/>\n              \n                <Redirect from={'*'} to={'/404'} />\n              </Switch>\n          \n \n        {/* Erorr Snackbar */}\n        <ErrorSnackbar />\n        {/* Erorr Snackbar */}\n        \n  </ div> )\n           \n}\nexport default App;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { appReducer } from \"./app-reducer\";\nimport { authReducer } from \"./auth-reducer\";\nimport { tasksReducer } from \"./tasks-reducer\";\nimport { todolistsReducer } from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers({\n    todolist: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer\n});\n\n\n// Same as what above, but more practical\nexport type AppRootState = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/store';\n\n\n\nReactDOM.render(\n  <HashRouter>   \n      <React.StrictMode>\n        {/* <App /> */}\n        {/* <AppWithReducers /> */}\n        <Provider store={store}>\n            <App />\n        </Provider>\n\n      </React.StrictMode>,\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemForm\":\"AddItemForm_itemForm__iA_oL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskInput\":\"Todolist_taskInput__1juvQ\",\"todolistContainer\":\"Todolist_todolistContainer__x3M-K\",\"title\":\"Todolist_title__G_6nD\",\"titleDiv\":\"Todolist_titleDiv__2_8tm\",\"addTaskButton\":\"Todolist_addTaskButton__3GCnp\",\"ListDeleteButton\":\"Todolist_ListDeleteButton__1Dpdk\",\"buttonRemoveTask\":\"Todolist_buttonRemoveTask__16_x7\",\"error\":\"Todolist_error__2E9a0\",\"errorMessage\":\"Todolist_errorMessage__2F5Xe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskLine\":\"Task_taskLine__MG8R8\"};"],"sourceRoot":""}